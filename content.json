{"pages":[{"title":"","text":"个人简介 很喜欢老罗的一段话：“每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶。💪💪💪💪💪💪冲鸭！！！！-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：坚信代码改变世界 博客 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 博客更新日志：–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板–2019.09.14：增加暗黑主题页面–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.19：开源博客代码 本站推荐索引 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 时间轴记录 刷新一句诗 2019计划 2018.12.31/21:59:00 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…） 多交朋友、多换位思考、多与朋友交流沟通 少玩游戏 -2019.06卸载游戏","link":"/about/index.html"},{"title":"","text":"个人简介 很喜欢老罗的一段话：“每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶。💪💪💪💪💪💪冲鸭！！！！-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：坚信代码改变世界 本暗黑模式只更新文章，其余信息不再更新，需要完全信息请点击以下：切换主站 博客更新日志：–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板–2019.09.14：增加暗黑主题页面–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.19：开源博客代码2019计划 2018.12.31/21:59:00 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…） 微信读书每天一个小时(目前时长:95h,年终总计300小时) 坚持每周去两次健身房(多练肚子、力量、学会蝶泳) 至少完成一项 前后端分离项目 完成一项 微服务项目(类似公司使用相关技术) 不辞职 多交朋友、多换位思考、多与朋友交流沟通 居安思危，多思考关注相关专业前景，生活环境 Java基础技能强化 多买书 学习更多的新菜(至少三项) 少买电子产品，少网购，少逛数码产品 学英语记单词、学数学、多看视频教程 少玩游戏 -2019.06卸载游戏","link":"/abouta/index.html"},{"title":"","text":"图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请链接前请先添加本博链接，通过留言告知。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 会定期清理不符合要求的友链，不再另行通知。","link":"/friend/index.html"},{"title":"","text":"畅所欲言有留必应","link":"/message/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。有好听的音乐欢迎分享。 &nbsp;&nbsp;看看视频 -&gt;点击以下条目开始播放视频,向下滑动查看更多&lt;-","link":"/music/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"部署Redis主从服务器--Windows篇","text":"Redis主服务器 Redis 服务安装 记下安装路径，之后的安装服务等需要用到相关路径 安装Redis服务的端口，默认为6379 Redis安装文件下载 安装完成，安装后默认创建了一个Windows服务（Redis），但这个是默认的配置，根据项目我们需要自己更改一下相关IP等配置Redis 配置文件修改需要修改一下几个参数设置 –文件 redis.windows.conf1234bind 114.114.114.114(服务器地址)dir ./dbfilename dump.rdb (缓存文件地址)requirepass Xyhis@#Xyhis (Redis密码) 更改配置文件后，暂时用不了Windows服务（Redis），需要安装新的Redis服务安装Redis Windows服务Win+R 打开命令行cd 到安装Redis目录下,以默认安装路径为例1cd C:\\Program Files\\Redis 安装服务1C:\\Program Files\\Redis&gt;redis-server --service-install redis.windows.conf --loglevel verbose 意思是已存在服务，接下来先要卸载原来的redis服务 卸载服务1redis-server --service-uninstall 显示已经卸载成功，继续安装123C:\\Program Files\\Redis&gt;redis-server --service-install redis.windows.conf --loglevel verbose[11696] 15 Nov 14:24:35.534 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"C:\\Program Files\\Redis\" \"C:\\Program Files\\Redis\\\"[11696] 15 Nov 14:24:35.535 # Redis successfully installed as a service. 启动Redis服务1redis-server --service-start 安装成功常见报错报错，卸载后安装还是报错这是因为redis-cli还在启动导致不能安装12341）redis-cli.exe 启动cli2）shutdown 关闭3）exit 离开，返回上一层4）重新安装 以上全部无效1.使用Redis自带命令登录关闭Redis服务1redis-cli -h 127.0.0.1 -p 6379 shutdown 2.bat，创建bat命令结束进程12set p=redis-cli.exetaskkill /f /im %p% 3.使用完整路径安装(部分老系统电脑使用这个方法)1redis-server --service-install redis.windows.conf --loglevel verbose 4.配置相关环境变量使用(完整路径的改良版)1redis-server %RedisHome%\\redis.windows.conf Redis 验证安装安装RedisDesktopManager，默认直接下一步安装 填写相关IP信息和密码，能正常连接即可，到此，主服务器配置完毕。 Redis从服务器安装Redis 内容和安装主服务器一致，主从服务器区别在于配置文件上的不同配置文件修改 redis.windows.conf12slaveof 114.114.114.114 主服务器Redis IPmasterauth abc123 主服务器Redis密码 安装服务内容和安装主服务器一致 测试主从服务器主要测试Redis主从服务安装是否成功，主从是否实现主服务器Redis cd到Redis安装目录1cd C:\\Program Files\\Redis 命令行登录Redis12$ redis-cli -h host -p port -a passwordC:\\Program Files\\Redis&gt;redis-cli.exe -h 127.0.0.1 -p 6379 -a \"123\" 往主Redis写入数据1set name posn 查询数据1get name Redis目录解析普通理解的文件用处，需要更详细的可以百度123456789101112131415161718192021dump.rdb 本地数据文件EventLog.dllInstallRedisService.batLogs 日志Redis on Windows Release Notes.docx 官方文档Redis on Windows.docx 官方文档Windows Service Documentation.docx 官方文档redis-benchmark.exe 性能测试redis-benchmark.pdbredis-check-aof.exeredis-check-aof.pdbredis-check-dump.exe redis-check-dump.pdbredis-cli.exe 客户端redis-cli.pdbredis-server.exe 服务端redis-server.pdbredis.windows-service.conf 配置文件redis.windows.conf 配置文件redis.windowsForSlave.conf 自定义配置文件temp-1542164504.18020.rdb 临时数据备份 Redis 常用命令12345678910111213141516171819202122232425262728293031323334//停止Redis服务redis-server stop//启动Redis服务redis-server start//重启Redis服务redis-server restart //查看redis进程ps -ef|grep redis//以redis.conf配置文件启动服务redis-server redis.conf//退出登入redisquit//获取redis信息info//安装Redis Windows服务redis-server --service-install redis.windows.conf --loglevel verbose//启动Redis服务redis-server --service-start//清空Redis服务器所有数据redis-cli -h 127.0.0.1 -p 6379 -a \"asd2828\" 127.0.0.1:6379 flushall//卸载Redis Windows服务redis-server --service-uninstall//停止Redis服务redis-server --service-stop//查询命令，sscan BsItem 0 match *9898* count 100000 key(表名) (模糊查询条件) (查询数量)//安装命令（带服务名）redis-server --service-install redis.windows6379.conf --service-name RedisService6379 --loglevel verbose //卸载命令（带服务名）redis-server --service-uninstall --service-name RedisService6379//启动命令（带服务名）redis-server start --service-name RedisService6379 切换服务器bat其实redis的指向就只是根据redis.windows.conf来执行，同理，在项目需要多个指向（测试和正式）我们就可以利用批处理来切换，或者可以使用局域网来配置，下面的批处理就是在Redis的目录下复制了一份配置文件命名为redis.windows.test.conf，把里面的直线ip和密码等更换了123456789101112131415161718192021222324252627282930313233@echo off :: BatchGotAdmin :------------------------------------- REM --&gt; Check for permissions &gt;nul 2&gt;&amp;1 \"%SYSTEMROOT%\\system32\\cacls.exe\" \"%SYSTEMROOT%\\system32\\config\\system\" REM --&gt; If error flag set, we do not have admin. if '%errorlevel%' NEQ '0' ( echo Requesting administrative privileges... goto UACPrompt ) else ( goto gotAdmin ) :UACPrompt echo Set UAC = CreateObject^(\"Shell.Application\"^) &gt; \"%temp%\\getadmin.vbs\" echo UAC.ShellExecute \"%~s0\", \"\", \"\", \"runas\", 1 &gt;&gt; \"%temp%\\getadmin.vbs\" \"%temp%\\getadmin.vbs\" exit /B :gotAdmin if exist \"%temp%\\getadmin.vbs\" ( del \"%temp%\\getadmin.vbs\" ) pushd \"%CD%\" CD /D \"%~dp0\" :-------------------------------------- @echo offcd C:\\Program Files\\Redisredis-server --service-stop redis-server --service-uninstallredis-server --service-install redis.windows.test.conf --loglevel verboseredis-server --service-startpause 精简后的Redis配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364############################## REDIS CONFIG BY NINE ################################# 地址bind 0.0.0.0 127.0.0.1# 端口port 6379# 数据文件保存地址dir ./# 数据文件名称dbfilename dump6379.rdb# 日志文件保存地址logfile ./redis_log_6379.txt# 数据库数量databases 1# Redis访问密码requirepass @#Xyhis# 从缓存需要释放以下两句配置# slaveof 0.0.0.0 6375# masterauth @#Xyhistcp-backlog 511timeout 0tcp-keepalive 0loglevel noticesave 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesslave-serve-stale-data yesslave-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-disable-tcp-nodelay noslave-priority 100appendonly noappendfilename \"appendonly.aof\"appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events \"\"hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-entries 512list-max-ziplist-value 64set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10aof-rewrite-incremental-fsync yes############################## REDIS CONFIG BY NINE ################################","link":"/2019/04/03/部署Redis主从服务器-Windows/"},{"title":"WindowsOS系统整合，创建自己的系统盘","text":"Windows OS 相关整合 Window 7 And Windows 10 自制MSDN原版 10 IN 1 ISO镜像 Tools ： Imagex、WimTool、Dism++、MSDN ISO镜像 123456789101112131415161718解压ISO文件 提取出sources-&gt;install.wim 重命名install.wim文件（自定义）打开WIMtool（管理员） 菜单-&gt;删卷和信息-&gt;浏览(打开提取到的wim文件)修改映像名称，显示名称，映像描述，显示描述-&gt;修改映像信息查看映像信息可以查看包含有多少个映像，映像卷号对应相应的映像每一个卷号修改了要点修改映像信息进行保存以此类推，把所有卷所有需要的映像的信息全部改好。记录下哪一个wim文件哪一卷对应的是什么映像imagex.exe放置到C:\\Windows\\System32目录下打开命令行（管理员）命令模板：imagex /export e:\\win764.wim 1 E:\\install.wim /compress maximum 12e:\\win764.wim：你要合并的wim文件也就是第一步提取出来的wim文件，这里放在e盘根目录下（根据自己情况可自定义）E:\\install.wim：合并后的新文件（自动创建install.wim文件）这里存放在E盘根目录（根据自己情况可自定义） 12341：这里的1代表的是你要合并的wim文件的第一卷，假设你要合并的文件有3卷，则imagex /export e:\\win764.wim 1 E:\\install.wim /compress maximumimagex /export e:\\win764.wim 2 E:\\install.wim /compress maximumimagex /export e:\\win764.wim 3 E:\\install.wim /compress maximum 1. windows7 企业版sp1 12345文件名 : cn_windows_7_enterprise_with_sp1_x64_dvd_u_677685.isoSHA1 : 9BA5E85596C2F25BE59F7E96139D83D4CB261A62文件大小 : 3.04GB发布时间 : 2011-05-12LINK : ed2k://|file|cn_windows_7_enterprise_with_sp1_x64_dvd_u_677685.iso|3265574912|E9DB2607EA3B3540F3FE2E388F8C53C4|/ OS版本 文件名 CMD win7 企业版sp1 win7_esp1.wim imagex /export e:\\win7_esp1.wim 1 E:\\install.wim /compress maximum —分—割—线— 2. windows7 4 IN 1版本sp1 12345文件名 : cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.isoSHA1 : 2CE0B2DB34D76ED3F697CE148CB7594432405E23文件大小 : 3.19GB发布时间 : 2011-05-12LINK : ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/ OS版本 文件名 CMD win7 家庭普通版sp1 win7_msp1.wim imagex /export e:\\win7_msp1.wim 1 E:\\install.wim /compress maximum win7 家庭高级版sp1 win7_msp1.wim imagex /export e:\\win7_msp1.wim 2 E:\\install.wim /compress maximum win7 专业版sp1 win7_msp1.wim imagex /export e:\\win7_msp1.wim 3 E:\\install.wim /compress maximum win7 旗舰版sp1 win7_msp1.wim imagex /export e:\\win7_msp1.wim 4 E:\\install.wim /compress maximum —分—割—线— 3. windows10 3 IN 1版本1709 123456文件名 : cn_windows_10_multi-edition_vl_version_1709_updated_dec_2017_x64_dvd_100406208.isoSHA1 : 69dc07e7b7940121027be4c9b51648fa31d2b6ad文件大小 : 4.66GB发布时间 : 2017-12-19内核版本 : 1709LINK : ed2k://|file|cn_windows_10_multi-edition_vl_version_1709_updated_dec_2017_x64_dvd_100406208.iso|5007116288|317BDC520FA2DD6005CBA8293EA06DF6|/ OS版本 文件名 CMD win10 教育版1709 win10_mdec1709.wim imagex /export e:\\win10_mdec1709.wim 1 E:\\install.wim /compress maximum win10 企业版1709 win10_mdec1709.wim imagex /export e:\\win10_mdec1709.wim 2 E:\\install.wim /compress maximum win10 专业版1709 win10_mdec1709.wim imagex /export e:\\win10_mdec1709.wim 3 E:\\install.wim /compress maximum —分—割—线— 4. windows10 长期服务版2016 123456文件名 : cn_windows_10_enterprise_2016_ltsb_x64_dvd_9060409.isoSHA1 : 9E405E950890D2A196565BCA35E152F9CFAD296D文件大小 : 3.56GB发布时间 : 2016-08-11内核版本 : 1607LINK : ed2k://|file|cn_windows_10_enterprise_2016_ltsb_x64_dvd_9060409.iso|3821895680|FF17FF2D5919E3A560151BBC11C399D1|/ OS版本 文件名 CMD win10 长期服务版1607 win10_eltsb1607.wim imagex /export e:\\win10_eltsb1607.wim 1 E:\\install.wim /compress maximum —分—割—线— 5. windows10 S版 123456文件名 : en_windows_10_s_version_1703_updated_july_2017_x64_dvd_10928916.isoSHA1 : BBEE654D384AE14BA2B64F149E25DFAEF7D5754B文件大小 : 4.47GB发布时间 : 2017-07-27内核版本 : 1703LINK : ed2k://|file|en_windows_10_s_version_1703_updated_july_2017_x64_dvd_10928916.iso|4799027200|A953CDE943DF709E8CCA148DA0CCCA79|/ OS版本 文件名 CMD win10 S版1703 win10_s1703.wim imagex /export e:\\win10_s1703.wim 1 E:\\install.wim /compress maximum —分—割—线— 5. windows 10 IN 1 版 123文件名 : _NINTH.iso文件大小 : 10.5GB发布时间 : 2018-04-18 OS版本 文件名 win7 企业版sp1 install.wim win7 家庭普通版sp1 install.wim win7 家庭高级版sp1 install.wim win7 专业版sp1 install.wim win7 旗舰版sp1 install.wim win10 教育版1709 install.wim win10 企业版1709 install.wim win10 专业版1709 install.wim win10 长期服务版1607 install.wim win10 S版1703 install.wim 12Windows 10 1803ed2k://|file|cn_windows_10_business_editions_version_1803_updated_march_2018_x64_dvd_12063730.iso|4634574848|5674B3586C866EB2F47D7736A1FDE27A|/","link":"/2019/10/17/WindowsOS系统整合，创建自己的系统盘/"},{"title":"制作Visual Studio 2017离线包","text":"制作Visual Studio 2017离线包 安装文件下载地址 1https://www.visualstudio.com 对应版本 Version File Visual Studio Enterprise (企业版) vs_enterprise.exe Visual Studio Professional (专业版) vs_professional.exe Visual Studio Community (社区版, 免费) vs_community.exe 命令参数： Parameter Remarks –layout 安装文件的下载路径，例如：C:\\DataDanZhang\\vs2017\\offline-en-chs –lang 语言包。例如需要中文版，则输入参数:- -lang cn-ZH 可选语言： Language Coding Remarks cs-CZ Czech de-DE German en-US English 英文 es-ES Spanish fr-FR French it-IT Italian ja-JP Japanese ko-KR Korean pl-PL Polish pt-BR Portuguese - Brazil ru-RU Russian tr-TR Turkish zh-CN Chinese – Simplified 中文简体 zh-TW Chinese - Traditional 中文繁体 实例用管理员身份打开命令行，输入如下命令1C:\\vs2017\\vs_enterprise.exe --layout C:\\vs2017\\offline-en-chs --lang zh-CN C:\\vs2017\\vs_enterprise.exe这段为下载的软件的位置，每个人不一样 此命令为中文版，layout后面问存放的位置，需要英文可以在后面添加英文参数1C:\\vs2017\\vs_enterprise.exe --layout C:\\vs2017\\offline-en-chs --lang zh-CN en-US","link":"/2019/10/17/制作Visual Studio 2017离线包/"},{"title":"C#发送邮件DEMO","text":"本文主要介绍桌面程序发送邮件功能，demo下载在文章末尾 C#发送邮件DEMOEmailHelp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162using Nine.ModelLibrary;using System;using System.Collections.Generic;using System.Configuration;using System.IO;using System.Linq;using System.Net.Mail;using System.Web.Script.Serialization;namespace Nine.UnitlLibrary{ public static class EmailHelp { /// &lt;summary&gt; /// 发送邮件 /// &lt;/summary&gt; /// &lt;param name=\"strHost\"&gt;发送方发送方服务器地址&lt;/param&gt; /// &lt;param name=\"strAccount\"&gt;发送方帐号&lt;/param&gt; /// &lt;param name=\"strPwd\"&gt;发送方密码&lt;/param&gt; /// &lt;param name=\"strFrom\"&gt;发送方邮件地址&lt;/param&gt; /// &lt;param name=\"to\"&gt;接收方邮件地址&lt;/param&gt; /// &lt;param name=\"title\"&gt;邮件标题&lt;/param&gt; /// &lt;param name=\"content\"&gt;邮件正文内容&lt;/param&gt; /// &lt;param name=\"sfile\"&gt;邮件附件&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool SendEmail(EmailModel email) { SmtpClient smtpClient = new SmtpClient(); SetDefulValue(email); smtpClient.Host = email.SmtpHost; ;//指定SMTP服务器 smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;//指定电子邮件发送方式 smtpClient.EnableSsl = true; //是否使用默认凭据，若为false，则使用自定义的证书，就是下面的networkCredential实例对象 smtpClient.UseDefaultCredentials = false; smtpClient.Credentials = new System.Net.NetworkCredential(email.Account, email.PassWord);//用户名和密码 MailAddress sendEailAddress = new MailAddress(email.FromEmamilAddress, \"发件人名称\"); int Success = 0; for (int i = 0; i &lt; email.ToEmamilAddress.Count(); i++) { MailMessage mailMessage = new MailMessage(sendEailAddress, new MailAddress(email.ToEmamilAddress[i])) { Subject = email.EmialTitle,//主题 Body = email.EmialContent,//内容 BodyEncoding = System.Text.Encoding.UTF8,//正文编码 IsBodyHtml = true,//设置为HTML格式 Priority = MailPriority.High//优先级 }; // 添加附件 if (email.File != \"\") { mailMessage.Attachments.Add(new Attachment(email.File)); } try { smtpClient.Send(mailMessage); Success++; } catch { //MessageBox.Show(\"失败 - \"+ smtpClient.Port+ \"【端口】\"); return false; } if (i == email.ToEmamilAddress.Count() - 1) { mailMessage.Dispose();//释放资源 } //finally //{ // mailMessage.Dispose();//释放资源 //} } smtpClient.Dispose(); if (Success == email.ToEmamilAddress.Count()) { return true; } else { return false; } } private static void SetDefulValue(EmailModel email) { if (string.IsNullOrEmpty(email.SmtpHost)) { email.SmtpHost = \"smtp.qq.com\"; } if (string.IsNullOrEmpty(email.Account)) { email.Account = \"3270779240\"; } if (string.IsNullOrEmpty(email.PassWord)) { email.PassWord = \"XXXXXXXX\"; } if (string.IsNullOrEmpty(email.FromEmamilAddress)) { email.FromEmamilAddress = \"3270779240@qq.com\"; } } private static JavaScriptSerializer javaScriptSerializer = new JavaScriptSerializer(); static List&lt;Contacts&gt; ContactsList = new List&lt;Contacts&gt;(); public static EmailModel GetEmailModel(bool isIIS, string contactsName) { List&lt;string&gt; list = new List&lt;string&gt;(); //收件人配置文件路径，这个需要在程序的配置文件中进行配置一下 //本文的配置路径 &lt;add key=\"ContactsFileUrl\" value=\"D:\\LogDataMonitornine\\ContactsConnection.config\"/&gt; string file = ConfigurationManager.AppSettings[\"ContactsFileUrl\"].ToString(); System.IO.FileStream aFile = new System.IO.FileStream(file, System.IO.FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite); StreamReader streamReader = new StreamReader(aFile); //序列化json配置文件 while (!streamReader.EndOfStream) { string strCurrentRow = streamReader.ReadLine(); int IndexofA = strCurrentRow.IndexOf(\"{\"); int IndexofB = strCurrentRow.LastIndexOf(\"}\"); string contentList = strCurrentRow.Substring(IndexofA, IndexofB - IndexofA + 1); Contacts returnData = javaScriptSerializer.Deserialize&lt;Contacts&gt;(contentList); ContactsList.Add(returnData); } string Content; string Title; //通知IIS分组联系人 if (isIIS) { for (int i = 0; i &lt; ContactsList.Count(); i++) { if (ContactsList[i].IsIIS == \"1\") { list.Add(ContactsList[i].Address.ToString().Trim()); } } //邮件内容 Content = \"服务发布成功 - \" + contactsName + DateTime.Now.ToString() + \"发布\" + \"\\n\" + \"请相关人员进行相关测试，代码更新等工作\"+\"【本邮件系统自动发送，勿回复】\"; //邮件标题 Title = \"服务发布成功\"; } else { //通知client分组联系人 for (int i = 0; i &lt; ContactsList.Count(); i++) { if (ContactsList[i].IsClient == \"1\") { list.Add(ContactsList[i].Address.ToString().Trim()); } } Content = \"客户端发布成功 - \" + contactsName + DateTime.Now.ToString() + \"发布\" + \"\\n\" + \"请相关人员进行相关测试，代码更新等工作\" + \"【本邮件系统自动发送，勿回复】\"; Title = \"客户端发布成功\"; } EmailModel emailModel = new EmailModel { EmialContent = Content, EmialTitle = Title, ToEmamilAddress = list }; return emailModel; } }} CS文件1234//获取收件人信息EmailModel emailModel = UnitlLibrary.EmailHelp.GetEmailModel(true, splitString[4]);//发送邮件Nine.UnitlLibrary.EmailHelp.SendEmail(emailModel) ContactsConnection.config1234567//收件人使用了配置文件进行配置{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"1\",\"IsClient\":\"1\"}{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"1\",\"IsClient\":\"0\"}{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"1\",\"IsClient\":\"1\"}{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"0\",\"IsClient\":\"1\"}{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"0\",\"IsClient\":\"1\"}{\"Name\": \"xxx\", \"Address\": \"xxx@qq.com\",\"IsIIS\":\"0\",\"IsClient\":\"1\"} Model1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980using System.Collections.Generic;namespace Nine.ModelLibrary{ public class EmailModel { /// &lt;summary&gt; /// 发送方发送方服务器地址 /// &lt;/summary&gt; private string _smtpHost = \"smtp.qq.com\"; public string SmtpHost { get { return _smtpHost; } set { _smtpHost = value; } } /// &lt;summary&gt; /// 发送方帐号 /// &lt;/summary&gt; private string _account = \"XXXXXXXXX\"; public string Account { get { return _account; } set { _account = value; } } /// &lt;summary&gt; /// 发送方密码 /// &lt;/summary&gt; private string _passWord = \"XXXXXXXXXX\"; public string PassWord { get { return _passWord; } set { _passWord = value; } } /// &lt;summary&gt; /// 发送方邮件地址 /// &lt;/summary&gt; private string _fromEmamilAddress = \"XXXXXXXXXX@qq.com\"; public string FromEmamilAddress { get { return _fromEmamilAddress; } set { _fromEmamilAddress = value; } } /// &lt;summary&gt; /// 接收方邮件地址 /// &lt;/summary&gt; private List&lt;string&gt; _toEmamilAddress = new List&lt;string&gt;(); public List&lt;string&gt; ToEmamilAddress { get { return _toEmamilAddress; } set { _toEmamilAddress = value; } } /// &lt;summary&gt; /// 邮件标题 /// &lt;/summary&gt; private string _emialTitle = \"\"; public string EmialTitle { get { return _emialTitle; } set { _emialTitle = value; } } /// &lt;summary&gt; /// 邮件正文内容 /// &lt;/summary&gt; private string _emialContent = \"\"; public string EmialContent { get { return _emialContent; } set { _emialContent = value; } } /// &lt;summary&gt; /// 附件 /// &lt;/summary&gt; private string _file = \"\"; public string File { get { return _file; } set { _file = value; } } }} 邮件发送 Demo 源码下载 http://hemrj.cn/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81DEMO.zip","link":"/2019/10/16/C-发送邮件DEMO/"},{"title":"SqlLite数据库帮助类和基本DEMO","text":"SqlLite数据库帮助类和基本DEMO SQLlite优点1234567891011◇轻量级SQLite和C/S模式的数据库软件不同，它是进程内的数据库引擎，因此不存在数据库的客户端和服务器。使用SQLite一般只需要带上它的一个动态 库，就可以享受它的全部功能。而且那个动态库的尺寸也挺小，以版本3.6.11为例，Windows下487KB、Linux下347KB。◇绿色软件SQLite的另外一个特点是绿色：它的核心引擎本身不依赖第三方的软件，使用它也不需要“安装”。所以在部署的时候能够省去不少麻烦。◇单一文件所谓的“单一文件”，就是数据库中所有的信息（比如表、视图、触发器、等）都包含在一个文件内。这个文件可以copy到其它目录或其它机器上，也照用不误。◇跨平台/可移植性如果光支持主流操作系统，那就没啥好吹嘘的了。除了主流操作系统，SQLite还支持了很多冷门的操作系统。我个人比较感兴趣的是它对很多嵌入式系统（比如Android、WindowsMobile、Symbin、Palm、VxWorks等）的支持。◇内存数据库（in-memory database）这年头，内存越来越便宜，很多普通PC都开始以GB为单位来衡量内存（服务器就更甭提了）。这时候，SQLite的内存数据库特性就越发显得好用。SQLite的API不区分当前操作的数据库是在内存还是在文件（对于存储介质是透明的）。所以如果你觉得磁盘I/O有可能成为瓶颈的话，可以考虑切换 为内存方式。切换的时候，操作SQLite的代码基本不用大改，只要在开始时把文件Load到内存，结束时把内存的数据库Dump回文件就OK了。在这种情况下，前面提到的“onlinebackup API”就派上用场了，聪明的同学应该明白我为啥这么期待backup功能了吧？ 添加引用管理NuGet管理程序–&gt;浏览–&gt;搜索System.Data.SQLite,安装引用或者直接在此下载,下载后引用System.Data.SQLite.dll，把SQLite.Interop.dll.zip解压放在debug目录下 1.http://hemrj.cn/System.Data.SQLite.dll 2.http://hemrj.cn/SQLite.Interop.dll.zip SqlLite帮助类using System;using System.Collections.Generic;using System.Data;using System.Data.Common;using System.Data.SQLite;using System.IO;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Nine.UnitlLibrary{ /// &lt;summary&gt; /// SQLite数据库操作帮助类 /// 提供一系列方便的调用: /// Execute,Save,Update,Delete... /// @author Nine /// &lt;/summary&gt; public class SqlLiteHepler { private bool _showSql = true; /// &lt;summary&gt; /// 是否输出生成的SQL语句 /// &lt;/summary&gt; public bool ShowSql { get { return this._showSql; } set { this._showSql = value; } } private readonly string _dataFile; private SQLiteConnection _conn; public SqlLiteHepler(string dataFile) { if (dataFile == null) throw new ArgumentNullException(\"dataFile=null\"); this._dataFile = dataFile; } /// &lt;summary&gt; /// &lt;para&gt;打开SQLiteManager使用的数据库连接&lt;/para&gt; /// &lt;/summary&gt; public void Open() { this._conn = OpenConnection(this._dataFile); } public void Close() { if (this._conn != null) { this._conn.Close(); } } /// &lt;summary&gt; /// &lt;para&gt;安静地关闭连接,保存不抛出任何异常&lt;/para&gt; /// &lt;/summary&gt; public void CloseQuietly() { if (this._conn != null) { try { this._conn.Close(); } catch { } } } /// &lt;summary&gt; /// &lt;para&gt;创建一个连接到指定数据文件的SQLiteConnection,并Open&lt;/para&gt; /// &lt;para&gt;如果文件不存在,创建之&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"dataFile\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static SQLiteConnection OpenConnection(string dataFile) { if (dataFile == null) throw new ArgumentNullException(\"dataFile=null\"); if (!File.Exists(dataFile)) { SQLiteConnection.CreateFile(dataFile); } SQLiteConnection conn = new SQLiteConnection(); SQLiteConnectionStringBuilder conStr = new SQLiteConnectionStringBuilder { DataSource = dataFile }; conn.ConnectionString = conStr.ToString(); conn.Open(); return conn; } /// &lt;summary&gt; /// &lt;para&gt;读取或设置SQLiteManager使用的数据库连接&lt;/para&gt; /// &lt;/summary&gt; public SQLiteConnection Connection { get { return this._conn; } set { if (value == null) { throw new ArgumentNullException(); } this._conn = value; } } protected void EnsureConnection() { if (this._conn == null) { throw new Exception(\"SQLiteManager.Connection=null\"); } } public string GetDataFile() { return this._dataFile; } /// &lt;summary&gt; /// &lt;para&gt;判断表table是否存在&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"table\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool TableExists(string table) { if (table == null) throw new ArgumentNullException(\"table=null\"); this.EnsureConnection(); // SELECT count(*) FROM sqlite_master WHERE type='table' AND name='test'; SQLiteCommand cmd = new SQLiteCommand(\"SELECT count(*) as c FROM sqlite_master WHERE type='table' AND name=@tableName \"); cmd.Connection = this.Connection; cmd.Parameters.Add(new SQLiteParameter(\"tableName\", table)); SQLiteDataReader reader = cmd.ExecuteReader(); reader.Read(); int c = reader.GetInt32(0); reader.Close(); reader.Dispose(); cmd.Dispose(); //return false; return c == 1; } /// &lt;summary&gt; /// &lt;para&gt;执行SQL,返回受影响的行数&lt;/para&gt; /// &lt;para&gt;可用于执行表创建语句&lt;/para&gt; /// &lt;para&gt;paramArr == null 表示无参数&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public int ExecuteNonQuery(string sql, SQLiteParameter[] paramArr) { if (sql == null) { throw new ArgumentNullException(\"sql=null\"); } this.EnsureConnection(); if (this.ShowSql) { Console.WriteLine(\"SQL: \" + sql); } SQLiteCommand cmd = new SQLiteCommand(); cmd.CommandText = sql; if (paramArr != null) { foreach (SQLiteParameter p in paramArr) { cmd.Parameters.Add(p); } } cmd.Connection = this.Connection; int c = cmd.ExecuteNonQuery(); cmd.Dispose(); return c; } /// &lt;summary&gt; /// &lt;para&gt;执行SQL,返回SQLiteDataReader&lt;/para&gt; /// &lt;para&gt;返回的Reader为原始状态,须自行调用Read()方法&lt;/para&gt; /// &lt;para&gt;paramArr=null,则表示无参数&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;&lt;/param&gt; /// &lt;param name=\"paramArr\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public SQLiteDataReader ExecuteReader(string sql, SQLiteParameter[] paramArr) { return (SQLiteDataReader)ExecuteReader(sql, paramArr, (ReaderWrapper)null); } /// &lt;summary&gt; /// &lt;para&gt;执行SQL,如果readerWrapper!=null,那么将调用readerWrapper对SQLiteDataReader进行包装,并返回结果&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;&lt;/param&gt; /// &lt;param name=\"paramArr\"&gt;null 表示无参数&lt;/param&gt; /// &lt;param name=\"readerWrapper\"&gt;null 直接返回SQLiteDataReader&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public object ExecuteReader(string sql, SQLiteParameter[] paramArr, ReaderWrapper readerWrapper) { if (sql == null) { throw new ArgumentNullException(\"sql=null\"); } this.EnsureConnection(); SQLiteCommand cmd = new SQLiteCommand(sql, this.Connection); if (paramArr != null) { foreach (SQLiteParameter p in paramArr) { cmd.Parameters.Add(p); } } SQLiteDataReader reader = cmd.ExecuteReader(); object result = null; if (readerWrapper != null) { result = readerWrapper(reader); } else { result = reader; } reader.Close(); reader.Dispose(); cmd.Dispose(); return result; } /// &lt;summary&gt; /// &lt;para&gt;执行SQL,返回结果集,使用RowWrapper对每一行进行包装&lt;/para&gt; /// &lt;para&gt;如果结果集为空,那么返回空List (List.Count=0)&lt;/para&gt; /// &lt;para&gt;rowWrapper = null时,使用WrapRowToDictionary&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;&lt;/param&gt; /// &lt;param name=\"paramArr\"&gt;&lt;/param&gt; /// &lt;param name=\"rowWrapper\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public List&lt;object&gt; ExecuteRow(string sql, SQLiteParameter[] paramArr, RowWrapper rowWrapper) { if (sql == null) { throw new ArgumentNullException(\"sql=null\"); } this.EnsureConnection(); SQLiteCommand cmd = new SQLiteCommand(sql, this.Connection); if (paramArr != null) { foreach (SQLiteParameter p in paramArr) { cmd.Parameters.Add(p); } } if (rowWrapper == null) { rowWrapper = new RowWrapper(SqlLiteHepler.WrapRowToDictionary); } SQLiteDataReader reader = cmd.ExecuteReader(); List&lt;object&gt; result = new List&lt;object&gt;(); if (reader.HasRows) { int rowNum = 0; while (reader.Read()) { object row = rowWrapper(rowNum, reader); result.Add(row); rowNum++; } } reader.Close(); reader.Dispose(); cmd.Dispose(); return result; } public static object WrapRowToDictionary(int rowNum, SQLiteDataReader reader) { int fc = reader.FieldCount; Dictionary&lt;string, object&gt; row = new Dictionary&lt;string, object&gt;(); for (int i = 0; i &lt; fc; i++) { string fieldName = reader.GetName(i); object value = reader.GetValue(i); row.Add(fieldName, value); } return row; } /// &lt;summary&gt; /// &lt;para&gt;执行insert into语句&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"table\"&gt;&lt;/param&gt; /// &lt;param name=\"entity\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public int Save(string table, Dictionary&lt;string, object&gt; entity) { if (table == null) { throw new ArgumentNullException(\"table=null\"); } this.EnsureConnection(); string sql = BuildInsert(table, entity); return this.ExecuteNonQuery(sql, BuildParamArray(entity)); } private static SQLiteParameter[] BuildParamArray(Dictionary&lt;string, object&gt; entity) { List&lt;SQLiteParameter&gt; list = new List&lt;SQLiteParameter&gt;(); foreach (string key in entity.Keys) { list.Add(new SQLiteParameter(key, entity[key])); } if (list.Count == 0) return null; return list.ToArray(); } private static string BuildInsert(string table, Dictionary&lt;string, object&gt; entity) { StringBuilder buf = new StringBuilder(); buf.Append(\"insert into \").Append(table); buf.Append(\" (\"); foreach (string key in entity.Keys) { buf.Append(key).Append(\",\"); } buf.Remove(buf.Length - 1, 1); // 移除最后一个, buf.Append(\") \"); buf.Append(\"values(\"); foreach (string key in entity.Keys) { buf.Append(\"@\").Append(key).Append(\",\"); // 创建一个参数 } buf.Remove(buf.Length - 1, 1); buf.Append(\") \"); return buf.ToString(); } private static string BuildUpdate(string table, Dictionary&lt;string, object&gt; entity) { StringBuilder buf = new StringBuilder(); buf.Append(\"update \").Append(table).Append(\" set \"); foreach (string key in entity.Keys) { buf.Append(key).Append(\"=\").Append(\"@\").Append(key).Append(\",\"); } buf.Remove(buf.Length - 1, 1); buf.Append(\" \"); return buf.ToString(); } /// &lt;summary&gt; /// &lt;para&gt;执行update语句&lt;/para&gt; /// &lt;para&gt;where参数不必要包含'where'关键字&lt;/para&gt; /// /// &lt;para&gt;如果where=null,那么忽略whereParams&lt;/para&gt; /// &lt;para&gt;如果where!=null,whereParams=null,where部分无参数&lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"table\"&gt;&lt;/param&gt; /// &lt;param name=\"entity\"&gt;&lt;/param&gt; /// &lt;param name=\"where\"&gt;&lt;/param&gt; /// &lt;param name=\"whereParams\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public int Update(string table, Dictionary&lt;string, object&gt; entity, string where, SQLiteParameter[] whereParams) { if (table == null) { throw new ArgumentNullException(\"table=null\"); } this.EnsureConnection(); string sql = BuildUpdate(table, entity); SQLiteParameter[] arr = BuildParamArray(entity); if (where != null) { sql += \" where \" + where; if (whereParams != null) { SQLiteParameter[] newArr = new SQLiteParameter[arr.Length + whereParams.Length]; Array.Copy(arr, newArr, arr.Length); Array.Copy(whereParams, 0, newArr, arr.Length, whereParams.Length); arr = newArr; } } return this.ExecuteNonQuery(sql, arr); } /// &lt;summary&gt; /// &lt;para&gt;查询一行记录,无结果时返回null&lt;/para&gt; /// &lt;para&gt;conditionCol = null时将忽略条件,直接执行select * from table &lt;/para&gt; /// &lt;/summary&gt; /// &lt;param name=\"table\"&gt;&lt;/param&gt; /// &lt;param name=\"conditionCol\"&gt;&lt;/param&gt; /// &lt;param name=\"conditionVal\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public Dictionary&lt;string, object&gt; QueryOne(string table, string conditionCol, object conditionVal) { if (table == null) { throw new ArgumentNullException(\"table=null\"); } this.EnsureConnection(); string sql = \"select * from \" + table; if (conditionCol != null) { sql += \" where \" + conditionCol + \"=@\" + conditionCol; } if (this.ShowSql) { Console.WriteLine(\"SQL: \" + sql); } List&lt;object&gt; list = this.ExecuteRow(sql, new SQLiteParameter[] { new SQLiteParameter(conditionCol,conditionVal) }, null); if (list.Count == 0) return null; return (Dictionary&lt;string, object&gt;)list[0]; } /// &lt;summary&gt; /// 执行delete from table 语句 /// where不必包含'where'关键字 /// where=null时将忽略whereParams /// &lt;/summary&gt; /// &lt;param name=\"table\"&gt;&lt;/param&gt; /// &lt;param name=\"where\"&gt;&lt;/param&gt; /// &lt;param name=\"whereParams\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public int Delete(string table, string where, SQLiteParameter[] whereParams) { if (table == null) { throw new ArgumentNullException(\"table=null\"); } this.EnsureConnection(); string sql = \"delete from \" + table + \" \"; if (where != null) { sql += \"where \" + where; } return this.ExecuteNonQuery(sql, whereParams); } #region NINE 19.10.10 /// &lt;summary&gt; /// 执行一个查询语句，返回一个包含查询结果的DataTable /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;要执行的查询语句&lt;/param&gt; /// &lt;param name=\"parameters\"&gt;执行SQL查询语句所需要的参数，参数必须以它们在SQL语句中的顺序为准&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable ExecuteDataTable(string sql, SQLiteParameter[] parameters) { using (SQLiteCommand command = new SQLiteCommand(sql, _conn)) { if (parameters != null) { command.Parameters.AddRange(parameters); } SQLiteDataAdapter adapter = new SQLiteDataAdapter(command); DataTable data = new DataTable(); adapter.Fill(data); return data; } } /// &lt;summary&gt; /// 创建SQLite数据库文件 /// &lt;/summary&gt; /// &lt;param name=\"dbPath\"&gt;要创建的SQLite数据库文件路径&lt;/param&gt; public static void CreateDB(string dbPath) { using (SQLiteConnection connection = new SQLiteConnection(\"Data Source=\" + dbPath)) { connection.Open(); using (SQLiteCommand command = new SQLiteCommand(connection)) { command.CommandText = \"CREATE TABLE Demo(id integer NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE)\"; command.ExecuteNonQuery(); command.CommandText = \"DROP TABLE Demo\"; command.ExecuteNonQuery(); } } } /// &lt;summary&gt; /// 对SQLite数据库执行增删改操作，返回受影响的行数。 /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;要执行的增删改的SQL语句&lt;/param&gt; /// &lt;param name=\"parameters\"&gt;执行增删改语句所需要的参数，参数必须以它们在SQL语句中的顺序为准&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public int ExecuteNonQuerySql(string sql, SQLiteParameter[] parameters) { int affectedRows = 0; using (DbTransaction transaction = _conn.BeginTransaction()) { using (SQLiteCommand command = new SQLiteCommand(_conn)) { command.CommandText = sql; if (parameters != null) { command.Parameters.AddRange(parameters); } affectedRows = command.ExecuteNonQuery(); } transaction.Commit(); } return affectedRows; } /// &lt;summary&gt; /// 执行一个查询语句，返回一个关联的SQLiteDataReader实例 /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;要执行的查询语句&lt;/param&gt; /// &lt;param name=\"parameters\"&gt;执行SQL查询语句所需要的参数，参数必须以它们在SQL语句中的顺序为准&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public SQLiteDataReader ExecuteReaderSql(string sql, SQLiteParameter[] parameters) { SQLiteCommand command = new SQLiteCommand(sql, _conn); if (parameters != null) { command.Parameters.AddRange(parameters); } return command.ExecuteReader(CommandBehavior.CloseConnection); } /// &lt;summary&gt; /// 执行一个查询语句，返回查询结果的第一行第一列 /// &lt;/summary&gt; /// &lt;param name=\"sql\"&gt;要执行的查询语句&lt;/param&gt; /// &lt;param name=\"parameters\"&gt;执行SQL查询语句所需要的参数，参数必须以它们在SQL语句中的顺序为准&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public Object ExecuteScalar(string sql, SQLiteParameter[] parameters) { using (SQLiteCommand command = new SQLiteCommand(sql, _conn)) { if (parameters != null) { command.Parameters.AddRange(parameters); } SQLiteDataAdapter adapter = new SQLiteDataAdapter(command); DataTable data = new DataTable(); adapter.Fill(data); return data; } } /// &lt;summary&gt; /// 查询数据库中的所有数据类型信息 /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public DataTable GetSchema() { using (SQLiteConnection connection = new SQLiteConnection(_conn)) { DataTable data = connection.GetSchema(\"TABLES\"); connection.Close(); //foreach (DataColumn column in data.Columns) //{ // Console.WriteLine(column.ColumnName); //} return data; } } #endregion } /// &lt;summary&gt; /// 在SQLiteManager.Execute方法中回调,将SQLiteDataReader包装成object /// &lt;/summary&gt; /// &lt;param name=\"reader\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public delegate object ReaderWrapper(SQLiteDataReader reader); /// &lt;summary&gt; /// 将SQLiteDataReader的行包装成object /// &lt;/summary&gt; /// &lt;param name=\"rowNum\"&gt;&lt;/param&gt; /// &lt;param name=\"reader\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public delegate object RowWrapper(int rowNum, SQLiteDataReader reader);} SqlLite DEMO1234567891011121314151617181920212223242526272829303132333435363738394041424344454647using System;using System.Data.SQLite;using System.Windows;namespace SqlLiteHelper{ /// &lt;summary&gt; /// MainWindow.xaml 的交互逻辑 /// &lt;/summary&gt; public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); } private void Window_Loaded(object sender, RoutedEventArgs e) { SqlLiteHepler sqlLiteHepler = new SqlLiteHepler(@\"D:\\NineBackstageToolsDB.db\"); sqlLiteHepler.Open(); //insert string insertSql = \"INSERT INTO CountUserData(JsonData) values (@JsonData)\"; SQLiteParameter[] insertParameters = new SQLiteParameter[]{ new SQLiteParameter(\"@JsonData\",\"test\") }; int insertRowCount = sqlLiteHepler.ExecuteNonQuerySql(insertSql, insertParameters); //update string updateSql = \"Update CountUserData set JsonData= @JsonData where id = @ID\"; SQLiteParameter[] updateParameters = new SQLiteParameter[]{ new SQLiteParameter(\"@JsonData\",\"update\"), new SQLiteParameter(\"@ID\",\"3\") }; int updateRowCount = sqlLiteHepler.ExecuteNonQuerySql(updateSql, updateParameters); //delete string deleteSql = \"delete from CountUserData where id = @ID\"; SQLiteParameter[] deleteParameters = new SQLiteParameter[]{ new SQLiteParameter(\"@ID\",\"4\") }; int deleteRowCount = sqlLiteHepler.ExecuteNonQuerySql(deleteSql, deleteParameters); //select string sqlText = \"select * from XyhisLog where (logtime) &gt; (@logtime)\"; SQLiteParameter[] selectParameters = new SQLiteParameter[]{ new SQLiteParameter(\"@logtime\",DateTime.Now.Date.ToString().Replace(\"/\",\"-\")) }; var ss = sqlLiteHepler.ExecuteDataTable(sqlText, selectParameters); } }} SqlLiteHelper Demo 源码下载 http://hemrj.cn/SqlLiteHelper.zip","link":"/2019/10/16/SqlLite数据库帮助类和基本DEMO/"},{"title":"WPF属性双向绑定","text":"WPF最主要的特性之一，双向绑定 基本原理12345678DependencyObject中拥有一个字典保存绑定信息，字典的key是依赖属性，value为绑定的值。对于绑定SetBinding方法是关键，他处理保存bingding对象的键值对，如果bingding对象中保存的TargetObject（被绑定对象）实现INotifyPropertyChanged接口，那么监听TargetObject的PropertyChanged事件，TargetObject一旦改变就修改依赖属性的值，这就可以实现了通知。而对于双向绑定，奥秘就在给依赖属性赋值的SetValue(xx,xx)方法中,这个方法中会查找管理绑定的那个字典，当前依赖属性是否绑定了值，如果绑定了并且是双向绑定，就给TargetObject设置新值，实现双向绑定。基础理论这种东西，看着有点犯困，基本了解就行，双向绑定主要是解耦合，数据实时刷新WPF双向数据同步：目标属性（UI）和源属性（CS）数据同步。实现双向数据同步数据源需要实现依赖属性INotifyPropertyChanged接口，因为依赖属性有垂直的内嵌变更通知机制。INotifyPropertyChanged是用于实现界面通知。DependencyObject是实现依赖对象的依赖属性。 实践Xaml1234567891011121314&lt;Window x:Class=\"WPFDemo.Window1\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:local=\"clr-namespace:WPFDemo\" mc:Ignorable=\"d\" Title=\"Window1\" Height=\"300\" Width=\"300\"&gt; &lt;Grid&gt; &lt;Button Name=\"Button_OK\" MaxWidth=\"50\" MaxHeight=\"20\" Click=\"Button_OK_Click\"&gt;OK&lt;/Button&gt; &lt;TextBlock MaxWidth=\"50\" MaxHeight=\"20\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Left\" Text=\"{Binding Text}\"&gt;&lt;/TextBlock&gt; &lt;/Grid&gt;&lt;/Window&gt; ViewModel1234567891011121314151617ObservableObject实现了INotifyPropertyChanged，项目中，一般我们把这个抽取重构为一个viewmodel的基类，继承ViewModelBase即可实现INotifyPropertyChangedpublic class MainViewModel : ViewModelBase { public MainViewModel() { Init(); InitCommand(); } //双向绑定属性 private string _text; public string Text { get { return _text; } set { this.SetProperty(ref _text, value); } } } DependencyObject123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115using System.ComponentModel;using System.Runtime.CompilerServices;namespace Nine.UnitlLibrary{ public class ObservableObject : INotifyPropertyChanged { #region 属性更改机制 public event PropertyChangedEventHandler PropertyChanged; #region 支持.NET4.5/.NET4.0 /// &lt;/summary&gt; /// /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;属性类型&lt;/typeparam&gt; /// &lt;param name=\"storage\"&gt;被设置的属性&lt;/param&gt; /// &lt;param name=\"isCheckEquals\"&gt;是否检查属性相等&lt;/param&gt; /// &lt;param name=\"value\"&gt;将要设置的属性值&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public bool SetProperty&lt;T&gt;(ref T storage, T value, bool isCheckEquals = true, [CallerMemberName] string propertyName = null) { if (isCheckEquals) { if (object.Equals(storage, value)) { return false; } } storage = value; OnPropertyChanged(propertyName); return true; } /// &lt;/summary&gt; /// /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;属性类型&lt;/typeparam&gt; /// &lt;param name=\"storage\"&gt;被设置的属性&lt;/param&gt; /// &lt;param name=\"isCheckEquals\"&gt;是否检查属性相等&lt;/param&gt; /// &lt;param name=\"value\"&gt;将要设置的属性值&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; protected bool SetProperty&lt;T&gt;(ref T storage, T value, [CallerMemberName] string propertyName = null, params string[] propertyNames) { storage = value; OnPropertyChanged(propertyName); foreach (string propertyname in propertyNames) { OnPropertyChanged(propertyname); } return true; } private void OnPropertyChanged([CallerMemberName] string propertyName = null) { PropertyChangedEventHandler eventHandler = PropertyChanged; if (eventHandler != null) { eventHandler(this, new PropertyChangedEventArgs(propertyName)); } } #endregion #region 支持.NET4.0 //private static string GetProperyName(string methodName) //{ // if (methodName.StartsWith(\"get_\") || methodName.StartsWith(\"set_\") || // methodName.StartsWith(\"put_\")) // { // return methodName.Substring(\"get_\".Length); // } // throw new Exception(methodName + \" not a method of Property\"); //} //protected bool SetProperty&lt;T&gt;(ref T storage, T value) //{ // if (object.Equals(storage, value)) { return false; } // storage = value; // string propertyName = GetProperyName(new System.Diagnostics.StackTrace(true).GetFrame(1).GetMethod().Name); // this.OnPropertyChanged(propertyName); // return true; //} ///// &lt;summary&gt; ///// ///// &lt;/summary&gt; ///// &lt;typeparam name=\"T\"&gt;属性类型&lt;/typeparam&gt; ///// &lt;param name=\"storage\"&gt;被设置的属性&lt;/param&gt; ///// &lt;param name=\"value\"&gt;将要设置的属性值&lt;/param&gt; ///// &lt;param name=\"isCheckEquals\"&gt;是否检查属性相等&lt;/param&gt; ///// &lt;returns&gt;&lt;/returns&gt; //protected bool SetProperty&lt;T&gt;(ref T storage, T value, bool isCheckEquals) //{ // if (isCheckEquals) // if (object.Equals(storage, value)) { return false; } // storage = value; // string propertyName = GetProperyName(new System.Diagnostics.StackTrace(true).GetFrame(1).GetMethod().Name); // this.OnPropertyChanged(propertyName); // return true; //} //private void OnPropertyChanged(string propertyName) //{ // var eventHandler = this.PropertyChanged; // if (eventHandler != null) // { // eventHandler(this, new PropertyChangedEventArgs(propertyName)); // } //} #endregion #endregion }} ViewModelBase123456789101112public class ViewModelBase : ObservableObject{ public event PropertyChangedEventHandler PropertyChanged; public void RaisePropertyChanged(string propertyName) { if (PropertyChanged != null) { PropertyChanged.Invoke(this, new PropertyChangedEventArgs(propertyName)); } }} ObservableCollectionWPF 提供 ObservableCollection 类，它是实现 INotifyCollectionChanged 接口的数据集合的内置实现。1234567public class Users : ObservableCollection&lt;Users&gt;{ public Users() : base() { }} Binding对象的属性说明1234567891011属性名 描述 1、Converter：转换器,将绑定的内容转换成自己需要的内容。自定义转换类 必须继承于:IValueConverter接口2、ElementName：绑定的源对象,本人理解 专程用于UI控件之间属性的绑定3、FallbackValue ：绑定无法返回有效值时的默认显示值4、Mode：绑定方式，枚举类型 Default OneWay TwoWay OneTime OneWayToSource5、Path：属性 路径，用来指定要绑定数据源的路径，其性质是一个属性，该属性该当是依靠属性，也即便能够告终积极更新机制的【单个类实现INotifyPropertyChanged、集合要 实现INotifyCollectionChanged接口】6、RelativeSource：常用于自身绑定或者数据模板中来指定绑定的源对象及控件模块中的绑定。7、Source：源对象，控件或自定义对象等。8、StringFormat：格式化表达式9、UpdateSourceTrigger：在双向绑定时TwoWay 或 OneWayToSource 时。用来确定属性更改的时机。UpdateSourceTrigger枚举类型：Default,PropertyChanged,LostFocus,Explicit。10、ValidationRules：验证规则.可以被设置为一个或多个派生自ValidationRule的对象，每个规则都会检查特定的条件并更具结果来标记数据的有效性 Mode指定绑定的方向1234567数据绑定模式共有四种：OneTime、OneWay、OneWayToSource和TwoWay，默认是TwoWay。TwoWay 当发生更改时的目标属性或源属性更新目标属性。OneWay 仅当源属性更改时，请更新目标属性。OneTime 仅当应用程序启动时或时，请更新目标属性DataContext发生了更改。OneWayToSource 目标属性更改时，请更新源属性。Default 默认值将导致Mode要使用的目标属性的值。 UpdateSourceTrigger1四种用来确定属性更改的时机，对于 Model=TwoWay 及 OneWayToSource是源数据改变时机 UI属性绑定数据对象12345UI属性直接绑定实例对象 。实例：Text=\"{Binding Path=EntryDate,StringFormat=yyyy-MM-dd}\"UI属性直接绑定静态对象。实例：DataContext=\"{x:Static local:GlobalData.user}\"UI属性绑定资源中的对象。DataContext=\"{StaticResource ResourceKey=userKey}\" 清除绑定1BindingOperations.ClearBinding(txtBlock, TextBlock.TextProperty); XAML绑定数据（方式一）12345678910111213141516171819202122232425262728293031这种情况只要 user实现了双向绑定则能自动绑定&lt;TextBox Name=\"txtName\" Text=\"{Binding user.Name}\"&gt;&lt;/TextBox&gt;&lt;TextBox Name=\"txtEmail\" Text=\"{Binding user.Email}\"&gt;&lt;/TextBox&gt;using System;using System.Windows; namespace WPFBinding{ /// &lt;summary&gt; /// MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow : Window { public ViewModel viewModel; public MainWindow() { InitializeComponent(); this.viewModel = new ViewModel(); this.Loaded += (s, e) =&gt; { this.DataContext = viewModel; this.viewModel.user = new Users() { Name = \"Nine\", Email = \"343710716@qq.com\" }; }; } }} 交互逻辑，实例化数据（方式二）123456789101112131415161718192021222324252627282930313233343536373839404142&lt;Label Name=\"lblName\"&gt;&lt;/Label&gt;&lt;TextBox Name=\"txtName\"&gt;&lt;/TextBox&gt;&lt;Label Name=\"lblEmail\"&gt;&lt;/Label&gt;&lt;TextBox Name=\"txtEmail\"&gt;&lt;/TextBox&gt;using System.Windows;using System.Windows.Controls;using System.Windows.Data; namespace WPFBinding{ /// &lt;summary&gt; /// GetBinding.xaml /// &lt;/summary&gt; public partial class GetBinding : Window { public ViewModel viewModel; public GetBinding() { InitializeComponent(); this.viewModel = new ViewModel(); this.Loaded += (s, e) =&gt; { this.DataContext = viewModel; this.viewModel.user = new Users() { Name = \"Nine\", Email = \"343710716@qq.com\" }; //绑定依赖属性Name txtName.SetBinding(TextBox.TextProperty, new Binding(\"Name\") { Source = viewModel.user }); //绑定元素属性Text lblName.SetBinding(ContentProperty, new Binding(\"Text\") { Source = txtName }); //绑定依赖属性Email txtEmail.SetBinding(TextBox.TextProperty, new Binding(\"Email\") { Source = viewModel.user }); //绑定元素属性Text lblEmail.SetBinding(ContentProperty, new Binding(\"Text\") { Source = txtEmail }); }; } }}","link":"/2019/10/16/WPF属性双向绑定/"},{"title":"WPF基本MVVM模式Command基类实现","text":"WPFMVVM模式 MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。 本文主要介绍实现基本的WPF MVVM的命令实现Viewmodel123456789101112131415161718192021public class MainViewModel : DelegateCommand{ public MainViewModel() { Init(); InitCommand(); } //声明命令 public ICommand ReleaseCommand { get; set; } private void InitCommand() { //绑定命令，初始化 this.ReleaseCommand = new DelegateCommand((obj) =&gt; { this.ReleaseExecute(obj); }); } //命令实现 private void ReleaseExecute(object obj) { }} 命令双向绑定基类1234567891011121314151617181920212223242526272829303132333435363738394041424344using System;using System.Windows.Input;namespace Nine.UnitlLibrary{ public class DelegateCommand : ICommand { private Action&lt;object&gt; executeAction; private Func&lt;object, bool&gt; canExecuteFunc; public event EventHandler CanExecuteChanged; public DelegateCommand(Action&lt;object&gt; execute) : this(execute, null) { } public DelegateCommand(Action&lt;object&gt; execute, Func&lt;object, bool&gt; canExecute) { if (execute == null) { return; } executeAction = execute; canExecuteFunc = canExecute; } public bool CanExecute(object parameter) { if (canExecuteFunc == null) { return true; } return canExecuteFunc(parameter); } public void Execute(object parameter) { if (executeAction == null) { return; } executeAction(parameter); } }}","link":"/2019/10/16/WPF基本MVVM模式Command基类实现/"},{"title":"实用小工具代码代码块","text":".net 开发常用代码收集模板，常用的一些复制，压缩，获取IIS信息等，工具常用收集 获取程序配置文件信息12// 获取配置文件信息string COMPERSSPATH = ConfigurationManager.AppSettings[\"CompressPath\"].ToString(); 获取网站配置文件信息Web.config12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/// &lt;summary&gt;/// 获取网站配置文件信息Web.config/// &lt;/summary&gt;/// &lt;param name=\"SiteInfo\"&gt;站点信息IP+端口10.35.1.90:8096&lt;/param&gt;/// &lt;param name=\"SiteInfo\"&gt;参数名称&lt;/param&gt;/// &lt;returns&gt;参数值&lt;/returns&gt;private string GetSiteWebconfigInfo(string SiteInfo, string SettingName, string fileNmae){ string strRreturn = \"\"; string sitePath = \"\"; string[] str = new string[2]; str = SiteInfo.Split(':'); string path = \"\"; string path2 = \"\"; string path3 = \"\"; webManager = new Microsoft.Web.Administration.ServerManager(); foreach (Site site in webManager.Sites) { foreach (var tmp in site.Bindings) { if (tmp.EndPoint != null) { if (tmp.EndPoint.Address != null || tmp.Host != \"\") { if (str[1] == tmp.EndPoint.Port.ToString()) { GetSiteWebconfigInfoEx(SettingName, fileNmae, out strRreturn, out sitePath, out path, out path2, out path3, site); } } } } } return strRreturn + \"$\" + path2 + \"$\" + path3;}private void GetSiteWebconfigInfoEx(string SettingName, string fileNmae, out string strRreturn, out string sitePath, out string path, out string path2, out string path3, Site site){ sitePath = site.Applications[\"/\"].VirtualDirectories[\"/\"].PhysicalPath; string His2Config = sitePath + @\"\\Web.config\"; System.Configuration.Configuration _Configuration = null; _Configuration = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap() { ExeConfigFilename = His2Config }, ConfigurationUserLevel.None); path3 = sitePath + @\"\\update\"; try { strRreturn = _Configuration.AppSettings.Settings[SettingName].Value; } catch (Exception) { strRreturn = \"读取配置文件【\" + SettingName + \"】失败\"; } path = sitePath + @\"\\bin\"; Directory.CreateDirectory(COMPERSSPATH + @\"\\HisRelease\"); path2 = COMPERSSPATH + @\"\\HisRelease\\\" + fileNmae + @\".zip\"; try { if (unZipFloClass.ZipCompressedFile(path, path2).Contains(\"成功\")) { string path4 = COMPERSSPATH + @\"\\HisRelease\"; if (Nine.UnitlLibrary.Unitl.CopyDirectory(path3, path4, true) == \"成功\") { path3 = path4 + @\"\\Server.xml\"; } } else { strRreturn += \"文件压缩失败\"; } } catch (Exception) { strRreturn += \"文件压缩失败\"; }} 取得单个应用程序池123456789101112131415161718/// &lt;summary&gt; /// 取得单个应用程序池 /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public static ApplicationPool GetAppPool(string appPoolName){ ApplicationPool app = null; var appPools = new DirectoryEntry(string.Format(\"IIS://{0}/W3SVC/AppPools\", \"localhost\")); foreach (DirectoryEntry entry in appPools.Children) { if (entry.Name == appPoolName) { var manager = new ServerManager(); app = manager.ApplicationPools[appPoolName]; } } return app;} 共享读取文件，不占用文件1234//设置文件共享方式为读写，FileShare.ReadWrite，这样的话，就可以打开了//这个方法打开文件的时候是以只读共享的方式打开的，但若此文件已被一个拥有写权限的进程打开的话，就无法读取了，System.IO.FileStream aFile = new System.IO.FileStream(file, System.IO.FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite);FileStream aFile = new FileStream(file, FileMode.Open); 截取json字符，反序列化为model12345//截取json字符，反序列化为modelint IndexofA = strCurrentRow.IndexOf(\"{\");int IndexofB = strCurrentRow.LastIndexOf(\"}\");string contentList = strCurrentRow.Substring(IndexofA, IndexofB - IndexofA + 1);IncrementDataList.Add(javaScriptSerializer.Deserialize&lt;CountUserData&gt;(contentList)); 字符串压缩12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/// &lt;summary&gt;/// 字符串压缩/// &lt;/summary&gt;/// &lt;returns&gt;The string.&lt;/returns&gt;/// &lt;param name=\"str\"&gt;String.&lt;/param&gt;public static string CompressString(string str){ string compressString = \"\"; byte[] compressBeforeByte = Encoding.UTF8.GetBytes(str); byte[] compressAfterByte = Compress(compressBeforeByte); compressString = Convert.ToBase64String(compressAfterByte); return compressString;}/// &lt;summary&gt; /// 字节数组压缩 /// &lt;/summary&gt; /// &lt;param name=\"strSource\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static byte[] Compress(byte[] data){ try { MemoryStream ms = new MemoryStream(); GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true); zip.Write(data, 0, data.Length); zip.Close(); byte[] buffer = new byte[ms.Length]; ms.Position = 0; ms.Read(buffer, 0, buffer.Length); ms.Close(); return buffer; } catch (Exception e) { throw new Exception(e.Message); }}/// &lt;summary&gt;/// 字符串解压缩/// &lt;/summary&gt;/// &lt;returns&gt;The string.&lt;/returns&gt;/// &lt;param name=\"str\"&gt;String.&lt;/param&gt;public static string DecompressString(string str){ string compressString = \"\"; //byte[] compressBeforeByte = Encoding.GetEncoding(\"UTF-8\").GetBytes(str); byte[] compressBeforeByte = Convert.FromBase64String(str); byte[] compressAfterByte = Decompress(compressBeforeByte); compressString = Encoding.UTF8.GetString(compressAfterByte); return compressString;}/// &lt;summary&gt; /// 字节数组解压缩 /// &lt;/summary&gt; /// &lt;param name=\"strSource\"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static byte[] Decompress(byte[] data){ try { MemoryStream ms = new MemoryStream(data); GZipStream zip = new GZipStream(ms, CompressionMode.Decompress, true); MemoryStream msreader = new MemoryStream(); byte[] buffer = new byte[0x1000]; while (true) { int reader = zip.Read(buffer, 0, buffer.Length); if (reader &lt;= 0) { break; } msreader.Write(buffer, 0, reader); } zip.Close(); ms.Close(); msreader.Position = 0; buffer = msreader.ToArray(); msreader.Close(); return buffer; } catch (Exception e) { throw new Exception(e.Message); }} WPF 定时器12345678//WPF 定时器System.Timers.Timer timerLog = new System.Timers.Timer{ Interval = 1000 * 60};timerLog.Elapsed += new System.Timers.ElapsedEventHandler(UpdateLog);//到达时间的时候执行事件； timerLog.AutoReset = true;//设置是执行一次（false）还是一直执行(true)； timerLog.Enabled = true;//是否执行System.Timers.Timer.Elapsed事件； 输出文本日志记录1234567891011121314151617/// &lt;summary&gt;/// 写发布日志/// &lt;/summary&gt;/// &lt;param name=\"receiveString\"&gt;&lt;/param&gt;private static void WritePublishingLog(string receiveString){ try { StreamWriter LogWriter = new StreamWriter(PUBLISHINGLOGURL, true, System.Text.Encoding.GetEncoding(\"GB2312\")); LogWriter.Write(DateTime.Now.ToLongDateString() + \" \" + DateTime.Now.ToShortTimeString() + receiveString + \"\\n\"); LogWriter.Close(); } catch (Exception) { }} 拷贝文件到指定目录1234567891011121314151617181920212223242526272829303132333435363738394041424344/// &lt;summary&gt;/// 拷贝文件到指定目录/// &lt;/summary&gt;/// &lt;param name=\"sourceDirName\"&gt;&lt;/param&gt;/// &lt;param name=\"destDirName\"&gt;&lt;/param&gt;public void CopyDirectory(string sourceDirName, string destDirName, bool cover){ try { if (!Directory.Exists(destDirName)) { Directory.CreateDirectory(destDirName); File.SetAttributes(destDirName, File.GetAttributes(sourceDirName)); } if (destDirName[destDirName.Length - 1] != Path.DirectorySeparatorChar) { destDirName = destDirName + Path.DirectorySeparatorChar; } string[] files = Directory.GetFiles(sourceDirName); foreach (string file in files) { if (File.Exists(destDirName + Path.GetFileName(file)) &amp;&amp; cover == false) { continue; } File.Copy(file, destDirName + Path.GetFileName(file), true); File.SetAttributes(destDirName + Path.GetFileName(file), FileAttributes.Normal); // total++; } string[] dirs = Directory.GetDirectories(sourceDirName); foreach (string dir in dirs) { CopyDirectory(dir, destDirName + Path.GetFileName(dir), true); } } catch (Exception) { }} 创建、删除文件夹1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//创建文件夹Directory.CreateDirectory(@\"D:\\HisRelease\");#region 直接删除指定目录下的所有文件及文件夹(保留目录)/// &lt;summary&gt;///直接删除指定目录下的所有文件及文件夹(保留目录)/// &lt;/summary&gt;/// &lt;param name=\"strPath\"&gt;文件夹路径&lt;/param&gt;/// &lt;returns&gt;执行结果&lt;/returns&gt;public static void DeleteDir(string file){ try { //去除文件夹和子文件的只读属性 //去除文件夹的只读属性 System.IO.DirectoryInfo fileInfo = new DirectoryInfo(file); fileInfo.Attributes = FileAttributes.Normal &amp; FileAttributes.Directory; //去除文件的只读属性 System.IO.File.SetAttributes(file, System.IO.FileAttributes.Normal); //判断文件夹是否还存在 if (Directory.Exists(file)) { foreach (string f in Directory.GetFileSystemEntries(file)) { if (File.Exists(f)) { //如果有子文件删除文件 File.Delete(f); Console.WriteLine(f); } else { //循环递归删除子文件夹 DeleteDir(f); } } //删除空文件夹 Directory.Delete(file); } } catch (Exception ex) // 异常处理 { Console.WriteLine(ex.Message.ToString());// 异常信息 }}#endregion 读取wpf配置文件123456#region 读取wpf配置文件获取三层地址string His2Config = Environment.CurrentDirectory + @\"\\His2.exe.config\";System.Configuration.Configuration _Configuration = null;_Configuration = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap() { ExeConfigFilename = His2Config }, ConfigurationUserLevel.None);SancenAddress = _Configuration.AppSettings.Settings[\"Host\"].Value;#endregion wpf回归主线程12345678910//wpf回归主线程ThreadPool.QueueUserWorkItem(delegate{ SynchronizationContext.SetSynchronizationContext(new DispatcherSynchronizationContext(System.Windows.Application.Current.Dispatcher)); SynchronizationContext.Current.Post(pl =&gt; { RequestService(); }, null);}); 修改文件内容,多用于生成文件12345678910//修改文件内容string strFilePath = destinationFile;if (File.Exists(strFilePath)){ string strContent = File.ReadAllText(strFilePath, Encoding.Default); strContent = Regex.Replace(strContent, \"NINEDATE\", DateTime.Now.ToString()); strContent = Regex.Replace(strContent, \"NINEVER\", newVersion); strContent = Regex.Replace(strContent, \"NINEURL\", CurrofficialFtpConnection.UpdateXmlAddress.Replace(@\"/Server.xml\", \"/update.zip\")); File.WriteAllText(strFilePath, strContent);} task线程123456//task线程var t6 = Task.Factory.StartNew(() =&gt;{ Return = DownFtpFile(spath, FtpUserName, FtpPassWord, ftpURI);});Task.WaitAll(t6);//等待所有任务结束 下载FTP文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384/// &lt;summary&gt;/// 下载FTP文件/// &lt;/summary&gt;/// &lt;param name=\"TempFolderPath\"&gt;&lt;/param&gt;/// &lt;param name=\"FtpUserName\"&gt;&lt;/param&gt;/// &lt;param name=\"FtpPassWord\"&gt;&lt;/param&gt;/// &lt;param name=\"ftpURI\"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public string DownFtpFile(string TempFolderPath, string FtpUserName, string FtpPassWord, string ftpURI){ string returnMsg = \"\"; /*首先从配置文件读取ftp的登录信息*/ string LocalFileExistsOperation = \"write\"; string FtpPath = ftpURI; Uri uri = new Uri(FtpPath); string ss1 = System.IO.Path.GetFullPath(TempFolderPath); string ss2 = System.IO.Path.DirectorySeparatorChar.ToString(); string ss3 = System.IO.Path.GetFileName(uri.LocalPath); string FileName = ss1 + ss2 + ss3; //创建一个文件流 FileStream fs = null; Stream responseStream = null; try { //创建一个与FTP服务器联系的FtpWebRequest对象 FtpWebRequest request = (FtpWebRequest)WebRequest.Create(uri); //设置请求的方法是FTP文件下载 request.Method = WebRequestMethods.Ftp.DownloadFile; //连接登录FTP服务器 request.Credentials = new NetworkCredential(FtpUserName, FtpPassWord); //获取一个请求响应对象 FtpWebResponse response = (FtpWebResponse)request.GetResponse(); //获取请求的响应流 responseStream = response.GetResponseStream(); //判断本地文件是否存在，如果存在，则打开和重写本地文件 if (File.Exists(FileName)) { if (LocalFileExistsOperation == \"write\") { fs = File.Open(FileName, FileMode.Open, FileAccess.ReadWrite); } } //判断本地文件是否存在，如果不存在，则创建本地文件 else { fs = File.Create(FileName); } if (fs != null) { int buffer_count = 65536; byte[] buffer = new byte[buffer_count]; int size = 0; while ((size = responseStream.Read(buffer, 0, buffer_count)) &gt; 0) { fs.Write(buffer, 0, size); } fs.Flush(); fs.Close(); responseStream.Close(); } returnMsg = \"下载成功\"; } catch { returnMsg = \"下载失败\"; } finally { if (fs != null) fs.Close(); if (responseStream != null) responseStream.Close(); } return returnMsg;} wpf文本框自动显示到最后一行12345//wpf文本框自动显示到最后一行private void ConInfo_TextChanged(object sender, TextChangedEventArgs e){ ConInfo.ScrollToEnd();} 获取网页信息，验证登录demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#region OA登录验证//设置不弹出页面js错误信息OaWebBrowser.ScriptErrorsSuppressed = true;//打开OAOaWebBrowser.Url = new Uri(\"https://oa.xyhis.com\");#endregionthis.DataContext = LoginViewModel;txtAccount.Text = ConfigurationManager.AppSettings[\"Account\"].ToString().Trim();txtPassword.Password = ConfigurationManager.AppSettings[\"Pasd\"].ToString().Trim();private void BtnLogin_Click(object sender, RoutedEventArgs e){ if (OaWebBrowser.ReadyState == WebBrowserReadyState.Complete &amp;&amp; OaWebBrowser.IsBusy == false) { HtmlElement txtUserName = OaWebBrowser.Document.All[\"txtUserName\"]; txtUserName.SetAttribute(\"value\", this.txtAccount.Text); HtmlElement txtPwd = OaWebBrowser.Document.All[\"txtPwd\"]; txtPwd.SetAttribute(\"value\", this.txtPassword.Password); HtmlElement ImageButton1 = OaWebBrowser.Document.All[\"ImageButton1\"]; ImageButton1.InvokeMember(\"click\"); loginTimer.Interval = TimeSpan.FromMilliseconds(100); loginTimer.Tick += ValidateLogon; loginTimer.Start(); }}/// &lt;summary&gt;/// 登录验证/// &lt;/summary&gt;/// &lt;param name=\"sender\"&gt;&lt;/param&gt;/// &lt;param name=\"e\"&gt;&lt;/param&gt;private void ValidateLogon(object sender, EventArgs e){ if (OaWebBrowser.ReadyState == WebBrowserReadyState.Complete &amp;&amp; OaWebBrowser.IsBusy == false) { if (this.OaWebBrowser.Url.AbsoluteUri == \"https://oa.xyhis.com/Login.aspx\") { loginTimer.Stop();//停止计时器 LoginViewModel.IsWait = false; System.Windows.MessageBox.Show(\"账号或密码错误，登录失败\"); } else { loginTimer.Stop();//停止计时器 Nine.UnitlLibrary.StaticGlobalVariable.UserName = txtAccount.Text.Trim(); Nine.UnitlLibrary.StaticGlobalVariable.Password = txtPassword.Password.Trim(); Configuration configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None); if (chkRemember.IsChecked == true) { configuration.AppSettings.Settings[\"Account\"].Value = txtAccount.Text; configuration.AppSettings.Settings[\"Pasd\"].Value = txtPassword.Password; } else { configuration.AppSettings.Settings[\"Account\"].Value = \"\"; configuration.AppSettings.Settings[\"Pasd\"].Value = \"\"; } if (chkAutoLogin.IsChecked == true) { configuration.AppSettings.Settings[\"AutoLogin\"].Value = \"true\"; } else { configuration.AppSettings.Settings[\"AutoLogin\"].Value = \"false\"; } if (mainWindow == null) { mainWindow = new MainWindow(); mainWindow.Show(); this.Hide(); } configuration.Save(); ConfigurationManager.RefreshSection(\"appSettings\"); } }} 获取本机IP地址（当前使用v4地址）12345678910111213141516171819202122232425262728293031323334/// &lt;summary&gt;/// 获取本机IP地址（当前使用v4地址） 20180205 Ninth/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public static string GetLocalIP(){ //获取说有网卡信息 NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces(); foreach (NetworkInterface adapter in nics) { //判断是否为以太网卡 //Wireless80211 无线网卡 Ppp 宽带连接 //Ethernet 以太网卡 //这里篇幅有限贴几个常用的，其他的返回值大家就自己百度吧！ if (adapter.NetworkInterfaceType == NetworkInterfaceType.Ethernet) { //获取以太网卡网络接口信息 IPInterfaceProperties ip = adapter.GetIPProperties(); //获取单播地址集 UnicastIPAddressInformationCollection ipCollection = ip.UnicastAddresses; foreach (UnicastIPAddressInformation ipadd in ipCollection) { //InterNetwork IPV4地址 InterNetworkV6 IPV6地址 //Max MAX 位址 if (ipadd.Address.AddressFamily == AddressFamily.InterNetwork) //判断是否为ipv4 { return ipadd.Address.ToString();//获取ip } } } } return null;}","link":"/2019/10/16/实用小工具代码代码块/"},{"title":"VisualsvnServer跨版本库迁移目录且保留日志","text":"有这样一个问题，现在有一份代码code在版本库Nine.net/Nine.Basic/下，现在想把它移动到JamBlog/source/下 环境123456├─VisualsvnServer│ ├─Nine.net│ │ │─Nine.Basic│ │ └─xxxx│ ├─JamBlog│ │ └─source 需要达到的目的1. 将代码移动到新的版本库2. 将原始的提交记录保留本来打算用svn move来做的，后来发现因为是不同的版本库，所以这个想法走不通 一下以Windows为例，使用的是windows10123456主要分为几个步骤:I 进入VisualSVN Server，服务端，迁移命令都是server端执行II 导出需要迁移的代码库III 过滤导出代码库中需要的代码IV 导入过滤后的代码进入新的代码库 实现I 进入VisualSVN Server安装目录，注意，svn命令是在svn client端执行的，svnadmin svnserver svndumpfilter都是在svn server端执行的命令：1cd C:\\Program Files\\VisualSVN Server\\bin II 导出需要迁移的代码库命令：123456789指令格式：svnadmin dump 版本库源目录 &gt; 目标文件svnadmin dump D:\\同步文件夹\\OneDrive\\Repositories\\Nine.net &gt; Nine.netBack命令解析：将“D:\\同步文件夹\\OneDrive\\Repositories\\Nine.net”整个版本库导出至“Nine.netBack”这个文件中；“prog1”文件存放在当前目录，且不含扩展名；注意：Windows下，“版本库源目录”必须为包含format文件的目录，是存放文件的实际物理路径，非SVN服务器的相对路径； III 过滤导出代码库中需要的代码如果需要转移的源目录非根目录的，可使用svndumpfilter指令，将实际要转移的源目录从刚刚生成的文件中提取出来，并放到一个新文件中；在目标目录下导入时则使用这个新生成的文件；否则转移目录就是根目录则跳过这一步1234567svndumpfilter include Nine.Basic &lt;Nine.netBack&gt; Nine.netBack2命令解析将Nine.net中的Nine.Basic过滤出来，svndumpfilter include表示只保留制定的目录和文件,这句命令中指定的目录和文件就是Nine.Basic注意：此时过滤后生成了新的文件Nine.netBack2，执行最后导入的时候要注意别导入了整个版本库的原文件 IV 导入过滤后的代码进入新的代码库12345678910111213141.svnadmin load D:\\同步文件夹\\OneDrive\\Repositories\\JamBlog &lt; Nine.netBack22.svnadmin load D:\\同步文件夹\\OneDrive\\Repositories\\JamBlog --parent-dir source &lt; Nine.netBack2命令解析：两个命令二选一，本文章中需要导入到source目录，则选择第二个命令1.将“Nine.netBack2”整个版本库导入至“D:\\同步文件夹\\OneDrive\\Repositories\\JamBlog” JamBlog” 这个版本库的根目录下 ；2.将“Nine.netBack2”整个版本库导入至“D:\\同步文件夹\\OneDrive\\Repositories\\JamBlog” JamBlog” 这个版本库的source目录下 ；3.--parent-dir source 导入到 source 目录，此为版本库下的目录，若果是source下的xxx目录则需要在此更改目录--parent-dir source/xxx,而不是在前面版本库处增加子级目录注意：导入到指定目录的时候需要先进行手动创建该目录，例如这里是导入到source目录，则我们需要先创建source目录***svn中区分大小写，svn中区分大小写，svn中区分大小写 至此成功把代码库成功跨版本版本库迁移，且保留相关的提交记录参考文章：https://blog.csdn.net/helenfish/article/details/9984555https://blog.csdn.net/tianshijianbing1989/article/details/41980675","link":"/2019/10/16/VisualsvnServer跨版本库迁移目录且保留日志/"},{"title":"C#反射调用Demo","text":"C#反射调用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768ThreadPool.QueueUserWorkItem(delegate{ SynchronizationContext.SetSynchronizationContext(new DispatcherSynchronizationContext(System.Windows.Application.Current.Dispatcher)); SynchronizationContext.Current.Post(pl =&gt; { try { //输入 string tableMc=tableName.Text.Trim(); //反射dll path string dllPath=\"AppDomain.CurrentDomain.BaseDirectory +\"XYHis.BusinessRedis.dll\"\"; //获取类型，参数（名称空间+类） string dllClassName = \"XYHis.BusinessRedis.InRedisCacheService\"; //使用Assembly类加载程序集(dll文件地址)， Assembly assembly = Assembly.LoadFile(dllPath); //获取类型，参数（名称空间+类） Type type = assembly.GetType(dllClassName); //获取所有的公共方法 MethodInfo[] methodsInfo = type.GetMethods(); //创建该对象的实例，object类型，参数（名称空间+类） object instance = assembly.CreateInstance(dllClassName); ConsleLogInfo(\"状态信息\", \"开始更新\" + tableMc); for (int i = 0; i &lt; methodsInfo.Length; i++)//遍历所有的方法 { //如果名字等于输入的方法名 if (methodsInfo[i].Name == tableMc) { //获取方法的所有参数 ParameterInfo[] arrayParamsInfo = methodsInfo[i].GetParameters(); //无参执行 if (arrayParamsInfo.Length == 0) { //执行方法 object returnValer = type.GetMethod(tableMc).Invoke(instance, null); } else { //参数类型 设置方法中的参数类型，Type[]类型；如有多个参数可以追加多个 Type[] arrayParamsType = new Type[arrayParamsInfo.Length]; //参数值 object[] arrayParamsValue = new object[arrayParamsInfo.Length]; //添加参数，参数赋默认值 for (int j = 0; j &lt; arrayParamsInfo.Length; j++) { //获取参数类型设置，等同于//params_type[j] = Type.GetType(\"System.String\"); arrayParamsType[j] = Type.GetType(arrayParamsInfo[j].ParameterType.ToString()); //参数赋默认值 arrayParamsValue[j] = GetDefaultValueForType(arrayParamsType[j]); } //执行方法 object returnValer = type.GetMethod(tableMc, arrayParamsType).Invoke(instance, arrayParamsValue); } } } ConsleLogInfo(\"状态信息\", \"更新成功\" + tableMc); } catch (Exception err) { //System.Windows.MessageBox.Show(err.Message); //ConsleLogInfo(\"更新失败\", \"更新失败\" + tableMc); //ConsleLogInfo(\"=========更新失败=========\", err.Message.ToString()); } }, null);}); 上一段是单个DLL反射使用，由于项目需要，更改了一下可以实现遍历所有的dll，文章中用字符串数组代替了1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283ThreadPool.QueueUserWorkItem(delegate { SynchronizationContext.SetSynchronizationContext(new DispatcherSynchronizationContext(System.Windows.Application.Current.Dispatcher)); SynchronizationContext.Current.Post(pl =&gt; { try { int Success = 0; string[] classNameAll = new string[3]; classNameAll[0] = \"XYHis.BusinessRedis.InRedisCacheService\"; classNameAll[1] = \"XYHis.BusinessRedis.RmRedisCacheService\"; classNameAll[2] = \"XYHis.BusinessRedis.OuRedisCacheService\"; for (int x = 0; x &lt; classNameAll.Length; x++) { //获取类型，参数（名称空间+类） string dllClassName = classNameAll[x]; //使用Assembly类加载程序集(dll文件地址)， Assembly assembly = Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory + \"XYHis.BusinessRedis.dll\"); //获取类型，参数（名称空间+类） Type type = assembly.GetType(dllClassName); //获取所有的公共方法 MethodInfo[] methodsInfo = type.GetMethods(); for (int n = 0; n &lt; methodsInfo.Length; n++) { if (methodsInfo[n].Name == tableName.Text.Trim()) { Success = 1; ConsleLogInfo(\"状态信息\", \"查找结果：\"+tableName.Text.Trim() + \"()为His业务数据缓存\"); } } if (Success==1) { //创建该对象的实例，object类型，参数（名称空间+类） object instance = assembly.CreateInstance(dllClassName); ConsleLogInfo(\"状态信息\", \"开始更新\" + tableName.Text.Trim()); for (int i = 0; i &lt; methodsInfo.Length; i++)//遍历所有的方法 { if (methodsInfo[i].Name == tableName.Text.Trim())//如果名字等于输入的方法名 { ParameterInfo[] arrayParamsInfo = methodsInfo[i].GetParameters();//获取方法的所有参数 if (arrayParamsInfo.Length == 0)//无参执行 { object returnValer = type.GetMethod(tableName.Text.Trim()).Invoke(instance, null);//执行方法 } else { //参数类型 设置方法中的参数类型，Type[]类型；如有多个参数可以追加多个 Type[] arrayParamsType = new Type[arrayParamsInfo.Length]; //参数值 object[] arrayParamsValue = new object[arrayParamsInfo.Length]; //添加参数，参数赋默认值 for (int j = 0; j &lt; arrayParamsInfo.Length; j++) { //获取参数类型设置，等同于//params_type[j] = Type.GetType(\"System.String\"); arrayParamsType[j] = Type.GetType(arrayParamsInfo[j].ParameterType.ToString()); //参数赋默认值 arrayParamsValue[j] = GetDefaultValueForType(arrayParamsType[j]); } //执行方法 object returnValer = type.GetMethod(tableName.Text.Trim(), arrayParamsType).Invoke(instance, arrayParamsValue); } } } ConsleLogInfo(\"状态信息\", \"更新成功\" + tableName.Text.Trim()); Lith.Value = 100; return; } else { ConsleLogInfo(\"状态信息\", classNameAll[x]+\"找不到\" +tableName.Text.Trim() + \"()方法，继续往下查找\"); continue; } } } catch (Exception err) { //System.Windows.MessageBox.Show(err.Message); ConsleLogInfo(\"更新失败\", \"更新失败\" + tableName.Text.Trim()); ConsleLogInfo(\"=========更新失败=========\", err.Message.ToString()); } }, null);","link":"/2019/09/29/C-反射调用Demo/"},{"title":"IIS7.0/IIS7.5 Microsoft.Web.Administration相关操作参数详解","text":"IIS7.0/IIS7.5 Microsoft.Web.Administration相关操作参数详解 //需要引入Microsoft.Web.Administration.dll%WinDir%\\System32\\InetSrv1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//声明ServerManagerprivate ServerManager webManager;/// &lt;summary&gt;/// 设置IIS状态/// &lt;/summary&gt;/// &lt;param name=\"socketServer\"&gt;&lt;/param&gt;/// &lt;param name=\"strSRecMsg\"&gt;Socket接收到的信息&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;private string SetIISState(string strSRecMsg){ string strRreturn = \"\"; string startSiteName = strSRecMsg.Remove(0, 2); webManager = new Microsoft.Web.Administration.ServerManager(); foreach (Site site in webManager.Sites) { if (strSRecMsg.Contains(\"重启\") &amp;&amp; site.Name == startSiteName) { site.Stop(); site.Start(); ApplicationPool application = GetAppPool(startSiteName); if (application != null &amp;&amp; application.State == ObjectState.Stopped) { ServerManager webManager = new ServerManager(); application.Start(); webManager .CommitChanges(); } strRreturn = startSiteName + \"重启成功\"; } if (strSRecMsg.Contains(\"启动\") &amp;&amp; site.Name == startSiteName) { site.Start(); strRreturn = startSiteName + \"停止成功\"; } if (strSRecMsg.Contains(\"停止\") &amp;&amp; site.Name == startSiteName) { site.Stop(); strRreturn = startSiteName + \"停止成功\"; } } return strRreturn;} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216Microsoft.Web.Administration.ServerManager webManager = new Microsoft.Web.Administration.ServerManager(); System.Console.WriteLine(\"应用程序池默认设置：\"); System.Console.WriteLine(\"\\t常规：\"); System.Console.WriteLine(\"\\t\\t.NET Framework 版本：{0}\", webManager.ApplicationPoolDefaults.ManagedRuntimeVersion); System.Console.WriteLine(\"\\t\\t队列长度：{0}\", webManager.ApplicationPoolDefaults.QueueLength); System.Console.WriteLine(\"\\t\\t托管管道模式：{0}\", webManager.ApplicationPoolDefaults.ManagedPipelineMode.ToString()); System.Console.WriteLine(\"\\t\\t自动启动：{0}\", webManager.ApplicationPoolDefaults.AutoStart); System.Console.WriteLine(\"\\tCPU：\"); System.Console.WriteLine(\"\\t\\t处理器关联掩码：{0}\", webManager.ApplicationPoolDefaults.Cpu.webManagerpProcessorAffinityMask); System.Console.WriteLine(\"\\t\\t限制：{0}\", webManager.ApplicationPoolDefaults.Cpu.Limit); System.Console.WriteLine(\"\\t\\t限制操作：{0}\", webManager.ApplicationPoolDefaults.Cpu.Action.ToString()); System.Console.WriteLine(\"\\t\\t限制间隔（分钟）：{0}\", webManager.ApplicationPoolDefaults.Cpu.ResetInterval.TotalMinutes); System.Console.WriteLine(\"\\t\\t已启用处理器关联：{0}\", webManager.ApplicationPoolDefaults.Cpu.webManagerpAffinitized); System.Console.WriteLine(\"\\t回收：\"); System.Console.WriteLine(\"\\t\\t发生配置更改时禁止回收：{0}\", webManager.ApplicationPoolDefaults.Recycling.DisallowRotationOnConfigChange); System.Console.WriteLine(\"\\t\\t固定时间间隔（分钟）：{0}\", webManager.ApplicationPoolDefaults.Recycling.PeriodicRestart.Time.TotalMinutes); System.Console.WriteLine(\"\\t\\t禁用重叠回收：{0}\", webManager.ApplicationPoolDefaults.Recycling.DisallowOverlappingRotation); System.Console.WriteLine(\"\\t\\t请求限制：{0}\", webManager.ApplicationPoolDefaults.Recycling.PeriodicRestart.Requests); System.Console.WriteLine(\"\\t\\t虚拟内存限制（KB）：{0}\", webManager.ApplicationPoolDefaults.Recycling.PeriodicRestart.Memory); System.Console.WriteLine(\"\\t\\t专用内存限制（KB）：{0}\", webManager.ApplicationPoolDefaults.Recycling.PeriodicRestart.PrivateMemory); System.Console.WriteLine(\"\\t\\t特定时间：{0}\", webManager.ApplicationPoolDefaults.Recycling.PeriodicRestart.Schedule.ToString()); System.Console.WriteLine(\"\\t\\t生成回收事件日志条目：{0}\", webManager.ApplicationPoolDefaults.Recycling.LogEventOnRecycle.ToString()); System.Console.WriteLine(\"\\t进程孤立：\"); System.Console.WriteLine(\"\\t\\t可执行文件：{0}\", webManager.ApplicationPoolDefaults.Failure.OrphanActionExe); System.Console.WriteLine(\"\\t\\t可执行文件参数：{0}\", webManager.ApplicationPoolDefaults.Failure.OrphanActionParams); System.Console.WriteLine(\"\\t\\t已启用：{0}\", webManager.ApplicationPoolDefaults.Failure.OrphanWorkerProcess); System.Console.WriteLine(\"\\t进程模型：\"); System.Console.WriteLine(\"\\t\\tPing 间隔（秒）：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.PingInterval.TotalSeconds); System.Console.WriteLine(\"\\t\\tPing 最大响应时间（秒）：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.PingResponseTime.TotalSeconds); System.Console.WriteLine(\"\\t\\t标识：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.IdentityType); System.Console.WriteLine(\"\\t\\t用户名：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.UserName); System.Console.WriteLine(\"\\t\\t密码：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.Password); System.Console.WriteLine(\"\\t\\t关闭时间限制（秒）：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.ShutdownTimeLimit.TotalSeconds); System.Console.WriteLine(\"\\t\\t加载用户配置文件：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.LoadUserProfile); System.Console.WriteLine(\"\\t\\t启动时间限制（秒）：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.StartupTimeLimit.TotalSeconds); System.Console.WriteLine(\"\\t\\t允许 Ping：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.PingingEnabled); System.Console.WriteLine(\"\\t\\t闲置超时（分钟）：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.IdleTimeout.TotalMinutes); System.Console.WriteLine(\"\\t\\t最大工作进程数：{0}\", webManager.ApplicationPoolDefaults.ProceswebManagerodel.MaxProcesses); System.Console.WriteLine(\"\\t快速故障防护：\"); System.Console.WriteLine(\"\\t\\t“服务不可用”响应类型：{0}\", webManager.ApplicationPoolDefaults.Failure.LoadBalancerCapabilities.ToString()); System.Console.WriteLine(\"\\t\\t故障间隔（分钟）：{0}\", webManager.ApplicationPoolDefaults.Failure.RapidFailProtectionInterval.TotalMinutes); System.Console.WriteLine(\"\\t\\t关闭可执行文件：{0}\", webManager.ApplicationPoolDefaults.Failure.AutoShutdownExe); System.Console.WriteLine(\"\\t\\t关闭可执行文件参数：{0}\", webManager.ApplicationPoolDefaults.Failure.AutoShutdownParams); System.Console.WriteLine(\"\\t\\t已启用：{0}\", webManager.ApplicationPoolDefaults.Failure.RapidFailProtection); System.Console.WriteLine(\"\\t\\t最大故障数：{0}\", webManager.ApplicationPoolDefaults.Failure.RapidFailProtectionMaxCrashes); System.Console.WriteLine(\"\\t\\t允许32位应用程序运行在64位 Windows 上：{0}\", webManager.ApplicationPoolDefaults.Enable32BitAppOnWin64); System.Console.WriteLine(); System.Console.WriteLine(\"网站默认设置：\"); System.Console.WriteLine(\"\\t常规：\"); System.Console.WriteLine(\"\\t\\t物理路径凭据：UserName={0}, Password={1}\", webManager.VirtualDirectoryDefaults.UserName, webManager.VirtualDirectoryDefaults.Password); System.Console.WriteLine(\"\\t\\t物理路径凭据登录类型：{0}\", webManager.VirtualDirectoryDefaults.LogonMethod.ToString()); System.Console.WriteLine(\"\\t\\t应用程序池：{0}\", webManager.ApplicationDefaults.ApplicationPoolName); System.Console.WriteLine(\"\\t\\t自动启动：{0}\", webManager.SiteDefaults.ServerAutoStart); System.Console.WriteLine(\"\\t行为：\"); System.Console.WriteLine(\"\\t\\t连接限制：\"); System.Console.WriteLine(\"\\t\\t\\t连接超时（秒）：{0}\", webManager.SiteDefaults.Limits.ConnectionTimeout.TotalSeconds); System.Console.WriteLine(\"\\t\\t\\t最大并发连接数：{0}\", webManager.SiteDefaults.Limits.MaxConnections); System.Console.WriteLine(\"\\t\\t\\t最大带宽（字节/秒）：{0}\", webManager.SiteDefaults.Limits.MaxBandwidth); System.Console.WriteLine(\"\\t\\t失败请求跟踪：\"); System.Console.WriteLine(\"\\t\\t\\t跟踪文件的最大数量：{0}\", webManager.SiteDefaults.TraceFailedRequestsLogging.MaxLogFiles); System.Console.WriteLine(\"\\t\\t\\t目录：{0}\", webManager.SiteDefaults.TraceFailedRequestsLogging.Directory); System.Console.WriteLine(\"\\t\\t\\t已启用：{0}\", webManager.SiteDefaults.TraceFailedRequestsLogging.Enabled); System.Console.WriteLine(\"\\t\\t已启用的协议：{0}\", webManager.ApplicationDefaults.EnabledProtocols); foreach (var s in webManager.Sites)//遍历网站 { System.Console.WriteLine(); System.Console.WriteLine(\"模式名：{0}\", s.Schema.Name); System.Console.WriteLine(\"编号：{0}\", s.Id); System.Console.WriteLine(\"网站名称：{0}\", s.Name); System.Console.WriteLine(\"物理路径：{0}\", s.Applications[\"/\"].VirtualDirectories[\"/\"].PhysicalPath); System.Console.WriteLine(\"物理路径凭据：{0}\", s.Methods.ToString()); System.Console.WriteLine(\"应用程序池：{0}\", s.Applications[\"/\"].ApplicationPoolName); System.Console.WriteLine(\"已启用的协议：{0}\", s.Applications[\"/\"].EnabledProtocols); System.Console.WriteLine(\"自动启动：{0}\", s.ServerAutoStart); System.Console.WriteLine(\"运行状态：{0}\", s.State.ToString()); System.Console.WriteLine(\"网站绑定：\"); foreach (var tmp in s.Bindings) { System.Console.WriteLine(\"\\t类型：{0}\", tmp.Protocol); System.Console.WriteLine(\"\\tIP 地址：{0}\", tmp.EndPoint.Address.ToString()); System.Console.WriteLine(\"\\t端口：{0}\", tmp.EndPoint.Port.ToString()); System.Console.WriteLine(\"\\t主机名：{0}\", tmp.Host); //System.Console.WriteLine(tmp.BindingInformation); //System.Console.WriteLine(tmp.CertificateStoreName); //System.Console.WriteLine(tmp.IsIPPortHostBinding); //System.Console.WriteLine(tmp.IsLocallyStored); //System.Console.WriteLine(tmp.UseDwebManager apper); } System.Console.WriteLine(\"连接限制：\"); System.Console.WriteLine(\"\\t连接超时（秒）：{0}\", s.Limits.ConnectionTimeout.TotalSeconds); System.Console.WriteLine(\"\\t最大并发连接数：{0}\", s.Limits.MaxConnections); System.Console.WriteLine(\"\\t最大带宽（字节/秒）：{0}\", s.Limits.MaxBandwidth); System.Console.WriteLine(\"失败请求跟踪：\"); System.Console.WriteLine(\"\\t跟踪文件的最大数量：{0}\", s.TraceFailedRequestsLogging.MaxLogFiles); System.Console.WriteLine(\"\\t目录：{0}\", s.TraceFailedRequestsLogging.Directory); System.Console.WriteLine(\"\\t已启用：{0}\", s.TraceFailedRequestsLogging.Enabled); System.Console.WriteLine(\"日志：\"); //System.Console.WriteLine(\"\\t启用日志服务：{0}\", s.LogFile.Enabled); System.Console.WriteLine(\"\\t格式：{0}\", s.LogFile.LogFormat.ToString()); System.Console.WriteLine(\"\\t目录：{0}\", s.LogFile.Directory); System.Console.WriteLine(\"\\t文件包含字段：{0}\", s.LogFile.LogExtFileFlags.ToString()); System.Console.WriteLine(\"\\t计划：{0}\", s.LogFile.Period.ToString()); System.Console.WriteLine(\"\\t最大文件大小（字节）：{0}\", s.LogFile.TruncateSize); System.Console.WriteLine(\"\\t使用本地时间进行文件命名和滚动更新：{0}\", s.LogFile.LocalTimeRollover); System.Console.WriteLine(\"----应用程序的默认应用程序池：{0}\", s.ApplicationDefaults.ApplicationPoolName); System.Console.WriteLine(\"----应用程序的默认已启用的协议：{0}\", s.ApplicationDefaults.EnabledProtocols); //System.Console.WriteLine(\"----应用程序的默认物理路径凭据：{0}\", s.ApplicationDefaults.Methods.ToString()); //System.Console.WriteLine(\"----虚拟目录的默认物理路径凭据：{0}\", s.VirtualDirectoryDefaults.Methods.ToString()); System.Console.WriteLine(\"----虚拟目录的默认物理路径凭据登录类型：{0}\", s.VirtualDirectoryDefaults.LogonMethod.ToString()); System.Console.WriteLine(\"----虚拟目录的默认用户名：{0}\", s.VirtualDirectoryDefaults.UserName); System.Console.WriteLine(\"----虚拟目录的默认用户密码：{0}\", s.VirtualDirectoryDefaults.Password); System.Console.WriteLine(\"应用程序 列表：\"); foreach (var tmp in s.Applications) { if (tmp.Path != \"/\") { System.Console.WriteLine(\"\\t模式名：{0}\", tmp.Schema.Name); System.Console.WriteLine(\"\\t虚拟路径：{0}\", tmp.Path); System.Console.WriteLine(\"\\t物理路径：{0}\", tmp.VirtualDirectories[\"/\"].PhysicalPath); //System.Console.WriteLine(\"\\t物理路径凭据：{0}\", tmp.Methods.ToString()); System.Console.WriteLine(\"\\t应用程序池：{0}\", tmp.ApplicationPoolName); System.Console.WriteLine(\"\\t已启用的协议：{0}\", tmp.EnabledProtocols); } System.Console.WriteLine(\"\\t虚拟目录 列表：\"); foreach (var tmp2 in tmp.VirtualDirectories) { if (tmp2.Path != \"/\") { System.Console.WriteLine(\"\\t\\t模式名：{0}\", tmp2.Schema.Name); System.Console.WriteLine(\"\\t\\t虚拟路径：{0}\", tmp2.Path); System.Console.WriteLine(\"\\t\\t物理路径：{0}\", tmp2.PhysicalPath); //System.Console.WriteLine(\"\\t\\t物理路径凭据：{0}\", tmp2.Methods.ToString()); System.Console.WriteLine(\"\\t\\t物理路径凭据登录类型：{0}\", tmp2.LogonMethod.ToString()); } } } }","link":"/2019/09/29/IIS7详解/"},{"title":"Visual Studio创建类版权模板","text":"类版权模板 在开发过程中，经常需要给新增的类和接口添加 public 修饰符和一些相关的注释信息，这个工作是机械而且枯燥的，这个可以通过修改VS自带的类模板来实现。 1. 首先找到VS的安装目录，例如如下目录：1C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class\\Class.cs 2. 找到Class，Interface，WebClass这3个目录下面的CS文件后，分别打开，并在文件的最前面加上如下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115/********************************************************* 命名空间: $rootnamespace$* 文件名： $safeitemname$* 创建人： Nine* 电子邮件： NinthMrJ@vip.qq.com* 创建时间： $time$* 版本号： V1.0.0.0* 描述： * ========================================================* 修改时间： $time$* 修改人： $username$* 版本号： V1.0.0.0* 描述: * ========================================================* 唯一标识： $guid10$* 公司名称： Nine.MrJ* CLR版本： $clrversion$* 机器名称: $machinename$** Copyright (c) $year$$registeredorganization$ Nine.MrJ All Rights Reserved.**********************************************************/using System;using System.Collections.Generic;$if$ ($targetframeworkversion$ &gt;= 3.5)using System.Linq;$endif$using System.Text;$if$ ($targetframeworkversion$ &gt;= 4.5)using System.Threading.Tasks;$endif$namespace $rootnamespace${ /// &lt;summary&gt; /// $safeitemrootname$ /// &lt;/summary&gt; public class $safeitemrootname$ { #region 构造方法 /// &lt;summary&gt; /// $safeitemrootname$ /// &lt;/summary&gt; public $safeitemrootname$() { //this.InitCommand(); //Init(); } #endregion #region 变量常量 //public const string ALL = \"ALL\"; #endregion #region 命令定义 //public ICommand OpenFrmPatientAllInfoCommand { get; private set; } #endregion #region 界面属性 //private bool _isLoading; /// &lt;summary&gt; /// 正在加载数据中... /// &lt;/summary&gt; //public bool IsLoading //{ // get { return this._isLoading; } // set { this.SetProperty(storage: ref this._isLoading, value: value); } //} #endregion #region 后台运行 /// &lt;summary&gt; /// 后台线程 /// &lt;/summary&gt; //public BackgroundWorker BackgroundThread = new BackgroundWorker //{ // WorkerReportsProgress = false, // WorkerSupportsCancellation = true //}; /// &lt;summary&gt; /// 运行时 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; //void BackgroundThread_DoWork(object sender, DoWorkEventArgs e) //{ // //} /// &lt;summary&gt; /// 运行结束 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; //void BackgroundThread_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e) //{ // this.IsLoading = false; //} #endregion #region 方法实现 //private void Init() //{ // this.IsLoading = true; // this.BackgroundThread.DoWork += this.BackgroundThread_DoWork; // this.BackgroundThread.RunWorkerCompleted += this.BackgroundThread_RunWorkerCompleted; // if (!this.BackgroundThread.IsBusy) // { // this.BackgroundThread.RunWorkerAsync(); // } //} //protected override void InitCommand() //{ // this.FrmCashierUnLoadedCommand = new ViewModelCommand(parameter =&gt; { this.FrmCashierUnLoadedExecute(); }); //} #endregion }} 3、在class $safeitemrootname$ 前面添加public访问修饰符。这样我们每次在VS中新建类的时候，就不需要再手动去加public修饰符了。如下图所示：","link":"/2019/09/29/Visual Studio创建类版权模板/"},{"title":"Hexo使用","text":"Hexo安装使用 安装Git(本文使用2.2.1)1官网地址：https://git-scm.com/ 安装NodeJs(本文10.0.0 LTS)1官网地址：https://nodejs.org/en/ Open Git Bash 查看NodeJs版本是否安装成功1$ Node -v 安装Hexo1$ npm install hexo-cli -g 检查Hexo版本123456789101112131415161718$ hexo -vhexo-cli: 1.1.0os: Windows_NT 10.0.17763 win32 x64http_parser: 2.8.0node: 10.0.0v8: 7.0.276.38-node.11uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 67nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 63.1unicode: 11.0cldr: 34.0tz: 2018e CD 到安装目录1$ cd E:\\Hexo 初始化Hexo目录1$ hexo init 安装所需要的组件1$ npm install 安装Next主题1$ git clone https://github.com/theme-next/hexo-theme-next 生成静态网站1$ hexo g 开启服务器1$ hexo s 创建分类页面1$ hexo new page categories 创建标签页1$ hexo new page tags 创建文章1hexo new post 文章名 扩展插件：hexo d -g，生成以及部署了1npm install hexo-deployer-git --save 配置Deployment，_config.yml文件，修改repo值repo值是你在github项目里的sshhexo文章图片处理1鱼先森：https://blog.annieyu.com/posts/ebee4592.html 建站1https://www.cnblogs.com/fengxiongZz/p/7707219.html","link":"/2019/06/13/Hexo使用/"},{"title":"Git常用命令操作","text":"Git Command 添加到Git仓库123$ git add .-f 强制添加所有文件 $ git add -f file 查看当前Git add 忽略的目录或文件1$ git status --ignored 查看当前状态1$ git status 提交仓库1$ git commit -m \"提交全部文件\" 设置Git用户名/邮箱12$ git config --global user.name \"Ninth-MrJ\"$ git config --global user.email \"cuz_mr.j@live.com\" 添加Github源码仓库地址1$ git remote add origin git@github.com:Ninth-MrJ/Ninth-MrJ.github.io.CodeSource.git 检查SSH是否存在1$ cd ~/.ssh 创建SSH Key1$ ssh-keygen -t rsa -C “cuz_mr.j@live.com” 获取远程版本合并1$ git pull --rebase origin master 提交到主分支版本1$ git push -u origin master 添加远程github仓库的时候提示错误：fatal: remote origin already exists.1.先删除远程 Git 仓库1$ git remote rm origin 2.再添加远程 Git 仓库1$ git remote add origin git@github.com:Ninth-MrJ/Ninth-MrJ.github.io.CodeSource.git 如果执行 git remote rm origin 报错的话，我们可以手动修改gitconfig文件的内容12$ vi .git/config$ git submodule add .deploy_git","link":"/2019/06/13/Git常用命令操作/"},{"title":"代理Http请求服务端方法","text":"系统分两种模式访问1.Debug 模式–&gt;使用数据库连接驱动直连数据库（这个没什么好说）2.代理（Proxy）–&gt; 客户端通过代理（WebRequseter）发送http请求，服务端处理(ApiHandler)接收到Http请求解析处理，返回数据给客户端 ApiHandler1234567891011121314151617/// &lt;summary&gt;/// 通过实现 IHttpHandler 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。/// &lt;/summary&gt;/// &lt;param name=\"context\"&gt;System.Web.HttpContext 对象，它提供对用于为 HTTP /// 请求提供服务的内部服务器对象（如 Request、Response、Session和 Server）的引用。&lt;/param&gt;public void ProcessRequest(HttpContext context){ //WebApi分枝。 if (context.Request.AppRelativeCurrentExecutionFilePath == \"~/Handler.api\") { ResolveWebApi(context); } else if (context.Request.AppRelativeCurrentExecutionFilePath == \"~/ExternalHandler.api\") { ResolveWebApiEx(context); }} (ApiHandler)代理模式下无论是His或者行心云都是统一经过了这个入口访问服务端，这里也是他的一个AOP切面，可以在这里添加相关一些统一操作，例如截取所有访问记录日志在这里实现 代理模式主要引用有三个DLL1. WebApiResponder 2. WebBridgeContract 3. WebBridgeEndpoint 配置文件路径：~\\bin\\Debug\\Config1234├─Config.ORM.xml├─XYHis.FrameWork.Services.config├─XYHis.IBusiness.GblSystem.config├─XYHis.IService.config --以此为例 12345678910&lt;TypeMap&gt; &lt;MapKey/&gt; &lt;InterfaceName&gt;XYHis.IService.IPatientService.IBed&lt;/InterfaceName&gt; &lt;MapToType&gt;XYHis.Service.PatientService.Bed,XYHis.Service&lt;/MapToType&gt; &lt;CreaterMethod&gt;&lt;/CreaterMethod&gt; &lt;LifeTimeCode&gt;Transient&lt;/LifeTimeCode&gt; &lt;WebApiUrlList&gt; &lt;string&gt;http://120.77.3.221:8097/Handler.api&lt;/string&gt; &lt;/WebApiUrlList&gt; &lt;/TypeMap&gt; Web.ConfigWeb.config 文件中的 system.webServer 节用于指定适用于 Web 应用程序的 IIS 7.0 设置system.WebServer 是 configuration节的子级只适用于 IIS 7.0 集成模式，而不适用于经典模式 当请求未包含特定资源时，Web 服务器返回给客户端的默认文档（defaultDocument 元素）。 响应的压缩设置（httpCompression 元素）。 自定义标头（httpProtocol 节的 customHeaders 元素）。 模块（modules 元素）。 处理程序（handlers 元素） 如果应用程序正在经典模式下运行，则会忽略 Web.config 文件的 system.WebServer 节中指定的所有托管代码模块和处理程序。与 IIS 的早期版本相同，托管代码模块和处理程序必须在 system.web 节的 httpModules 和 httpHandlers 元素中定义。1234567&lt;handlers&gt; &lt;remove name=\"ExtensionlessUrlHandler-Integrated-4.0\"/&gt; &lt;remove name=\"OPTIONSVerbHandler\"/&gt; &lt;remove name=\"TRACEVerbHandler\"/&gt; &lt;add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\"/&gt; &lt;add name=\"ApiHandle\" verb=\"*\" path=\"*.api\" type=\"WebApiResponder.ApiHandler,WebApiResponder\"/&gt; &lt;/handlers&gt; Web.Config Demo 访问地址 http://localhost:6166/WebSite1/api/request.aspx?strtext=123 配置文件 1234567891011121314151617&lt;?xml version=\"1.0\"?&gt;&lt;configuration&gt; &lt;!--IIS经典模式下使用--&gt; &lt;system.web&gt; &lt;httpHandlers&gt; &lt;add path=\"request.aspx\" verb=\"*\" type=\" Bll.Handler.Test\"/&gt; &lt;add path=\"test.aspx\" verb=\"*\" type=\" Bll.Handler.Test\"/&gt; &lt;/httpHandlers&gt; &lt;/system.web&gt; &lt;!--IIS集成模式下使用--&gt; &lt;!--&lt;system.webServer&gt; &lt;handlers&gt; &lt;add name=\"request\" path=\"request.aspx\" verb=\"*\" type=\" Bll.Handler.Test\"/&gt; &lt;add name=\"test\" path=\"test.aspx\" verb=\"*\" type=\" Bll.Handler.Test\"/&gt; &lt;/handlers&gt; &lt;/system.webServer&gt;--&gt;&lt;/configuration&gt; 1234567891011121314&lt;add path=\"request.aspx\" verb=\"*\" type=\" Bll.Handler.Test\"/&gt;path这个呢就是我们访问的网页地址，就是上面输入的，我们找不到的那个文件名然后对应的处理程序是type=\" Bll.Handler.Test\"verb=\"*\" 是指定接收的方式，*是Get，Post都可以，也可以直接写Post这样就只接收Post提交了。现在大家明白了吧你访问request.aspx其实访问的就是Bll.Handler.Test.cs&lt;add name=\"ApiHandle\" verb=\"*\" path=\"*.api\" type=\"WebApiResponder.ApiHandler,WebApiResponder\"/&gt;那么我们的配置文件中的，同理可得verb=\"*\" 所有的请求模式都可以path=\"*.api\" 截取访问地址为.api后缀的请求对应的处理程序是type=\"WebApiResponder.ApiHandler,WebApiResponder\"WebApiResponder目录下的ApiHandler，类库为 WebApiResponder ApiHandlerusing Orm.WebBridgeContract;using System.Threading.Tasks;namespace Orm.WebApiResponder{ public class ApiHandler : IHttpHandler { /// &lt;summary&gt; /// json序列化器。 /// &lt;/summary&gt; IJsonSerializer Serializer { get; set; } /// &lt;summary&gt; /// 构造函数。 /// &lt;/summary&gt; public ApiHandler() { Serializer = ServiceTaker.GetService&lt;IJsonSerializer&gt;(); } /// &lt;summary&gt; /// 获取一个值，该值指示其他请求是否可以使用 IHttpHandler 实例。 /// 如果 IHttpHandler 实例可再次使用，则为 true；否则为 false。 /// &lt;/summary&gt; public bool IsReusable { get { return false; } } /// &lt;summary&gt; /// 通过实现 IHttpHandler 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。 /// &lt;/summary&gt; /// &lt;param name=\"context\"&gt;System.Web.HttpContext 对象，它提供对用于为 HTTP /// 请求提供服务的内部服务器对象（如 Request、Response、Session和 Server）的引用。&lt;/param&gt; public void ProcessRequest(HttpContext context) { //WebApi分枝。 if (context.Request.AppRelativeCurrentExecutionFilePath == \"~/Handler.api\") { ResolveWebApi(context); } else if (context.Request.AppRelativeCurrentExecutionFilePath == \"~/ExternalHandler.api\") { ResolveWebApiEx(context); } } /// &lt;summary&gt; /// 解析WebApi的请求。 /// &lt;/summary&gt; /// &lt;param name=\"context\"&gt;http上下文&lt;/param&gt; private void ResolveWebApi(HttpContext context) { var watch = new System.Diagnostics.Stopwatch(); watch.Start(); Stream streamResponse = context.Request.InputStream; StreamReader streamRead = new StreamReader(streamResponse, Encoding.UTF8); string strResponse = streamRead.ReadToEnd(); streamResponse.Close(); streamRead.Close(); MethodDC theContract = new MethodDC(); ApiResultDC theResult = new ApiResultDC(); InvokeResult result = new InvokeResult(); try { theContract = Serializer.Deserialize&lt;MethodDC&gt;(strResponse); ApiCore apiCpre = new ApiCore(theContract); result = apiCpre.Invoke(); if (result.ResultType.Name.ToLower() != \"void\") { theResult.JsonValue = Serializer.Serialize(result.ResultValue); theResult.TypeQualifiedName = result.ResultType.AssemblyQualifiedName; } else { theResult.JsonValue = string.Empty; theResult.TypeQualifiedName = result.ResultType.AssemblyQualifiedName; } } catch (Exception ex) { if (ex.InnerException != null &amp;&amp; ex.InnerException is Orm.Utilities.InformationException) { theResult.HasException = true; theResult.ExceptionMessage = ex.InnerException.Message; theResult.ExceptionState = 1; } else if (ex.InnerException is Orm.Utilities.WarningException) { theResult.HasException = true; theResult.ExceptionMessage = ex.InnerException.Message; theResult.ExceptionState = 2; } else if (ex.InnerException is Orm.Utilities.ErrorException) { theResult.HasException = true; theResult.ExceptionMessage = ex.InnerException.Message; theResult.ExceptionState = 2; } else { theResult.HasException = true; theResult.ExceptionMessage = ex.InnerException == null ? ex.Message : ex.InnerException.Message; theResult.ExceptionStack = ex.InnerException == null ? ex.StackTrace : ex.InnerException.StackTrace; } //Orm.Framework.Services.AppLogger.Log(ex.InnerException == null ? ex.Message : ex.InnerException.Message + \"\\r\\n\" + ex.StackTrace); StringBuilder errLog = new StringBuilder(); if (strResponse.Length &gt; 500) { errLog.Append(strResponse.Substring(0, 500)); } else { errLog.Append(strResponse); } Orm.Framework.Services.AppLogger.Log(ex.InnerException == null ? \"\\r\\n\\r\\n\" + ex.Message + \"\\r\\n\\r\\n\" + ex.StackTrace + \"\\r\\n\\r\\n\" + errLog.ToString() : \"\\r\\n\\r\\n\" + ex.InnerException.Message + \"\\r\\n\\r\\n\" + ex.InnerException.StackTrace + \"\\r\\n\\r\\n\" + errLog.ToString()); } finally { } theContract.Result = theResult; string jsonResult = Serializer.Serialize(theContract); context.Response.Write(jsonResult); //如果返回的数据大点则采用GZip压缩。 if (jsonResult.Length &gt; 10000) { //向输出流头部添加压缩信息 context.Response.AppendHeader(\"Content-encoding\", \"gzip\"); context.Response.Filter = new GZipStream(context.Response.Filter, CompressionMode.Compress); } watch.Stop(); //访问日志记录 //Task.Factory.StartNew(() =&gt; { string Parameters = \"\"; for (int i = 0; i &lt; theContract.ParameterList.Count; i++) { var ss = theContract.ParameterList[i].JsonValue.Length; Parameters += theContract.ParameterList[i].JsonValue.Replace(\"\\\"\",\"\"); } string strCookies = context.Request.Cookies.Keys[0]; string[] strCookiesArray = strCookies.Split('@'); //AOP截取服务方法访问，记录日志 CountUserData countUserData = new CountUserData { ApiInterfaceName = theContract.InterfaceName, ClientComputerIP = context.Request.UserHostAddress, LanIp = strCookiesArray[2], UserName = strCookiesArray[1], LocationName = strCookiesArray[0], MethodName = theContract.MethodName, ResponseData = Encoding.Default.GetByteCount(jsonResult).ToString(), OperTime = context.Timestamp, ParameterContents = Parameters, CounterTime = watch.ElapsedMilliseconds, }; JavaScriptSerializer jsSerializer = new JavaScriptSerializer(); System.Text.StringBuilder data_mainJson = new System.Text.StringBuilder(); jsSerializer.Serialize(countUserData, data_mainJson); string strRequestLog = string.Format(\"Url：{0} \", data_mainJson); Orm.Framework.Services.AppLogger.Log(strRequestLog, @\"E:\\PerformanceLog\\\" + DateTime.Now.ToString(\"yyyyMMdd\"), AppDomain.CurrentDomain.Id.ToString() + \".log\"); /// }); //写请求日志，用于跟踪请求的时间和数据大小。 if (watch.ElapsedMilliseconds &gt; 2000) { StringBuilder errLog = new StringBuilder(); if (strResponse.Length &gt; 500) { errLog.Append(strResponse.Substring(0, 500)); } else { errLog.Append(strResponse); } string strRequestTimeLog = string.Format(\"Url：{0} 大于2秒：{1} JSON:{2}\", context.Request.Url.ToString(), watch.ElapsedMilliseconds.ToString(), errLog); // Orm.Framework.Services.AppLogger.Log(strRequestTimeLog, @\"D:\\PerformanceLog\\\" + DateTime.Now.ToString(\"yyyyMMdd\"), AppDomain.CurrentDomain.Id.ToString() + \".log\"); strRequestTimeLog = null; } //如果是大对象85000的10倍 if (System.Text.Encoding.Default.GetByteCount(jsonResult) &gt; 840000) { StringBuilder errLog = new StringBuilder(); if (strResponse.Length &gt; 500) { errLog.Append(strResponse.Substring(0, 500)); } else { errLog.Append(strResponse); } //向输出流头部添加压缩信息 // Orm.Framework.Services.AppLogger.Log(string.Format(\"Url：{0} 大于850K的对象：{1}\", context.Request.Url.ToString(), errLog), @\"D:\\PerformanceLog\\\" + DateTime.Now.ToString(\"yyyyMMdd\"), AppDomain.CurrentDomain.Id.ToString() + \".log\"); } jsonResult = null; strResponse = null; } }} WebBridgeEndpoint123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168using System.Net;using System.Text;using System.Threading.Tasks;namespace Orm.WebBridgeEndpoint{ public class WebRequseter { IJsonSerializer Serializer { get; set; } public WebRequseter() { Serializer = ServiceTaker.GetService&lt;IJsonSerializer&gt;(); } public object RequseteWeb(string apiMapKey, string apiInterfaceName, string methodName, List&lt;object&gt; parameterList, string apiUrl = \"\") { return RequseteWeb(apiMapKey, apiInterfaceName, methodName, parameterList, null, apiUrl); } public object RequseteWeb(string apiMapKey, string apiInterfaceName, string methodName, List&lt;object&gt; parameterList, string[] types, string apiUrl = \"\") { HttpWebResponse response = null; Stream streamResponse = null; try { string cookieStr = UserProfiles.HospitalID + \"@\" + UserProfiles.UserID +\"@\" + UserProfiles.ClientComputerGuid; MethodDC theContract = new MethodDC(); theContract.ApiConfigKey = apiMapKey; theContract.InterfaceName = apiInterfaceName; theContract.MethodName = methodName; theContract.TypeArguments = types; List&lt;ParameterDC&gt; webParamerList = new List&lt;ParameterDC&gt;(); foreach (object param in parameterList) { ParameterDC aWebParamer = new ParameterDC(); aWebParamer.TypeQualifiedName = param.GetType().AssemblyQualifiedName; aWebParamer.JsonValue = Serializer.Serialize(param); webParamerList.Add(aWebParamer); } theContract.ParameterList = webParamerList; string jsonContract = Serializer.Serialize(theContract); //TODO:加密或压缩对jsonContract,密文可根据日期变化。服务端验证密文 MethodDC vdf = Serializer.Deserialize&lt;MethodDC&gt;(jsonContract); byte[] PostData = Encoding.UTF8.GetBytes(jsonContract); var watch = new System.Diagnostics.Stopwatch(); watch.Start(); HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiUrl); request.Method = \"POST\"; request.ContentType = \"application/x-www-form-urlencoded\"; request.GetRequestStream().Write(PostData, 0, PostData.Length); request.ContentType = \"text/xml\"; request.Headers.Add(\"Cookie\", cookieStr); ServicePoint currentServicePoint = request.ServicePoint; currentServicePoint.ConnectionLimit = 1000; response = (HttpWebResponse)request.GetResponse(); streamResponse = response.GetResponseStream(); string strResponse = string.Empty; //如果服务端采用了GZIP压缩,则先解压缩。 if (response.ContentEncoding.ToLower().Contains(\"gzip\")) { using (GZipStream gz = new GZipStream(streamResponse, CompressionMode.Decompress)) { using (StreamReader readerGzip = new StreamReader(gz, Encoding.UTF8)) { strResponse = readerGzip.ReadToEnd(); } } } else { using (StreamReader streamRead = new StreamReader(streamResponse, Encoding.UTF8)) { strResponse = streamRead.ReadToEnd(); } } //TODO:解密或解压缩对strResponse MethodDC reObj = Serializer.Deserialize&lt;MethodDC&gt;(strResponse); watch.Stop(); //写请求日志，用于跟踪请求的时间和数据大小。 string writeWebRequestLog = System.Configuration.ConfigurationManager.AppSettings[\"WriteClientHttpWebRequestLog\"]; if (writeWebRequestLog == null) { writeWebRequestLog = \"false\"; } if (bool.Parse(writeWebRequestLog) &amp;&amp; !apiInterfaceName.Contains(\"DBClientBase\")) { Task task = Task.Factory.StartNew(() =&gt; { byte[] responseData = Encoding.UTF8.GetBytes(strResponse); var counter = watch.ElapsedMilliseconds; string Parameters = \"\"; for (int i = 0; i &lt; theContract.ParameterList.Count; i++) { Parameters += theContract.ParameterList[i].JsonValue + \"@\"; } CountUserData countUserData = new CountUserData { ApiInterfaceName = apiInterfaceName, ClientComputerIP = UserProfiles.ClientComputerGuid, UserName = UserProfiles.UserID, LocationName = UserProfiles.HospitalID.ToString (), MethodName = methodName, CounterTime = counter, ResponseData = (responseData.Length / 1024.00).ToString(\"f0\"), OperTime = DateTime.Now, ParameterContents = Parameters, }; //Orm.Config.Service.DBClientService.Add&lt;CountUserData&gt;(countUserData); }); //string strRequestTimeLog = string.Format(\" 诊所：{0} ip地址：{1} 操作人：{2} 操作时间：{3} 接口：{4}调用方法：{5} 请求响应时间：{6}(毫秒) 返回值大小：{7}Kb\", // UserProfiles.LocationName, UserProfiles.ClientComputerGuid,UserProfiles.UserName,DateTime.Now, apiInterfaceName, methodName, counter.ToString(), (responseData.Length / 1024.00).ToString(\"f0\")); //WriteLog(strRequestTimeLog, null); } if (reObj.Result.HasException) { if (reObj.Result.ExceptionState == 1) { System.Windows.Forms.MessageBox.Show(reObj.Result.ExceptionMessage, \"消息\", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Information); return null; } else if (reObj.Result.ExceptionState == 2) { System.Windows.Forms.MessageBox.Show(reObj.Result.ExceptionMessage, \"警告\", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Warning); return null; } else if (reObj.Result.ExceptionState == 3) { System.Windows.Forms.MessageBox.Show(reObj.Result.ExceptionMessage, \"错误\", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error); return null; } else { throw new Exception(\"Message: \" + reObj.Result.ExceptionMessage + \"\\r\\n\" + \"Stack: \" + reObj.Result.ExceptionStack); } } else { Type relType = Type.GetType(reObj.Result.TypeQualifiedName); object relResult = null; if (relType.Name.ToLower() != \"void\") { relResult = Serializer.Deserialize(reObj.Result.JsonValue, relType); } return relResult; } } finally { if (streamResponse != null) { streamResponse.Close(); } if (response != null) { response.Close(); } } } }} XYHis.Config.Service.cs1234567891011121314//全局服务类访问private static ITestDemoServices _TestDemoServices; public static ITestDemoServices TestDemoServices { get { if (_TestDemoServices == null) { _TestDemoServices = ServiceTaker.GetRemoteService&lt;ITestDemoServices&gt;(); } return _TestDemoServices; } } XYHis.Framework.Services.ServiceTaker.cs123456789101112131415161718192021/// &lt;summary&gt; /// 取任意已经提供的Web服务。客户端使用 /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;服务类型。&lt;/typeparam&gt; /// &lt;param name=\"MapKey\"&gt;服务标识。&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static T GetRemoteService&lt;T&gt;(string MapKey = \"\") where T : class { if (AppSettings.Debug) { return GetService&lt;T&gt;(MapKey); } var theMaped = MapContainer.GetTypeMap(MapKey, typeof(T).FullName); if (theMaped == null) { throw new Exception(typeof(T).FullName + \" 没有在配置文件中注册映射。\"); } var Manager = GetService&lt;IRemoteProxyManager&gt;(); T proxy = Manager.GetApiProxy&lt;T&gt;(theMaped); return proxy; } ~\\bin\\Debug\\Config12345678910&lt;TypeMap&gt; &lt;MapKey/&gt; &lt;InterfaceName&gt;Orm.IServices.ITestSercive.ITestDemoServices&lt;/InterfaceName&gt; &lt;MapToType&gt;Orm.Services.TestSercive.TestDemoServices,Orm.Services.TestSercive&lt;/MapToType&gt; &lt;CreaterMethod&gt;&lt;/CreaterMethod&gt; &lt;LifeTimeCode&gt;Transient&lt;/LifeTimeCode&gt; &lt;WebApiUrlList&gt; &lt;string&gt;http://127.0.0.1:8088/Handler.api&lt;/string&gt; &lt;/WebApiUrlList&gt;&lt;/TypeMap&gt; Proxy_XYHis.IServices.TestSercive123456789101112131415161718192021222324252627282930313233343536public List&lt;BsHospital&gt; GetLocHouseRoomName() { List&lt;Object&gt; ParamList = new List&lt;Object&gt;(); string[] TypeArgs = null; return (List&lt;BsHospital&gt;)TheReQuseter.RequseteWeb(ApiTypeMap.MapConfigKey, \"Orm.IServices.ITestSercive.ITestDemoServices\", \"GetLocHouseRoomName\", ParamList, TypeArgs, GetOneUrl()); }//GetOneUrlpublic string GetOneUrl() { Random rd = new Random(); int id = rd.Next(0, ApiTypeMap.WebApiUrlList.Count); //return ApiTypeMap.WebApiUrlList[id]; if (Environments.IISServerUrl != string.Empty) { return Environments.IISServerUrl; } else { return ConfigurationManager.AppSettings[\"ServiceAddress\"]; } }public class AutoUpdater{ /// &lt;summary&gt; ///检查更新 /// &lt;/summary&gt; public static void CheckUpdate() { string serverUrl = ConfigurationManager.AppSettings[\"ServiceAddress\"]; string updateUrl = ConfigurationManager.AppSettings[\"UpdateAddress\"]; XYHis.Framework.Services.Environments.IISServerUrl = serverUrl; ..... }} ApiHandler 前面有介绍XYHis.Services.TestSercive1234567public List&lt;BsHospital&gt; GetLocHouseRoomName() { XXX...... ......... ......... return ; }","link":"/2019/06/13/代理Http请求服务端方法/"},{"title":"C#自定义Distinct扩展方法","text":"自定义Distinct扩展方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace CommonHelper{ /// &lt;summary&gt; /// 自定义Distinct扩展方法 _NINTH 2019 0225 /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt; /// &lt;typeparam name=\"C\"&gt;&lt;/typeparam&gt; public class Compare&lt;T, C&gt; : IEqualityComparer&lt;T&gt; { private Func&lt;T, C&gt; _getField; public Compare(Func&lt;T, C&gt; getfield) { this._getField = getfield; } public bool Equals(T x, T y) { return EqualityComparer&lt;C&gt;.Default.Equals(_getField(x), _getField(y)); } public int GetHashCode(T obj) { return EqualityComparer&lt;C&gt;.Default.GetHashCode(this._getField(obj)); } } public static class DistinctHelper { /// &lt;summary&gt; /// 自定义Distinct扩展方法 /// &lt;/summary&gt; /// &lt;typeparam name=\"T\"&gt;要去重的对象类&lt;/typeparam&gt; /// &lt;typeparam name=\"C\"&gt;自定义去重的字段类型&lt;/typeparam&gt; /// &lt;param name=\"source\"&gt;要去重的对象&lt;/param&gt; /// &lt;param name=\"getfield\"&gt;获取自定义去重字段的委托&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static IEnumerable&lt;T&gt; Distinct&lt;T, C&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, C&gt; getfield) { return source.Distinct(new Compare&lt;T, C&gt;(getfield)); } }} Demo1List.Distinct(t=&gt;t.xxx).ToList();","link":"/2019/06/12/C-自定义Distinct扩展方法/"},{"title":"Windows 同时安装32位和64位 Oracle 客户端数据驱动","text":"系统配置 配置文件路径1C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config 配置文件1machine.config 查看当前安装Oracle Client版本号1C:\\app\\NINTH\\product\\11.1.0\\client_1\\odp.net\\bin\\2.x 修改配置文件1234567&lt;system.data&gt; &lt;DbProviderFactories&gt; &lt;add name=\"Oracle Data Provider for .NET\" invariant=\"Oracle.DataAccess.Client\" description=\"Oracle Data Provider for .NET\" type=\"Oracle.DataAccess.Client.OracleClientFactory, Oracle.DataAccess, Version=4.112.3.0, Culture=neutral, PublicKeyToken=89b483f429c47342\" /&gt; &lt;add name=\"Microsoft SQL Server Compact Data Provider 4.0\" invariant=\"System.Data.SqlServerCe.4.0\" description=\".NET Framework Data Provider for Microsoft SQL Server Compact\" type=\"System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91\" /&gt; &lt;add name=\"MySQL Data Provider\" invariant=\"MySql.Data.MySqlClient\" description=\".Net Framework Data Provider for MySQL\" type=\"MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d\" /&gt; &lt;/DbProviderFactories&gt; &lt;/system.data&gt; 完整配置文件lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!-- Please refer to machine.config.comments for a description and the default values of each configuration section. For a full documentation of the schema please refer to http://go.microsoft.com/fwlink/?LinkId=42127 To improve performance, machine.config should contain only those settings that differ from their defaults.--&gt;&lt;configuration&gt; &lt;configSections&gt; &lt;section name=\"oracle.manageddataaccess.client\" type=\"OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342\" /&gt; &lt;section name=\"oracle.unmanageddataaccess.client\" type=\"OracleInternal.Common.CustomSectionHandler, Oracle.DataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342\" /&gt; &lt;section name=\"oracle.dataaccess.client\" type=\"System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"appSettings\" type=\"System.Configuration.AppSettingsSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" restartOnExternalChanges=\"false\" requirePermission=\"false\" /&gt; &lt;section name=\"connectionStrings\" type=\"System.Configuration.ConnectionStringsSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" requirePermission=\"false\" /&gt; &lt;section name=\"mscorlib\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"runtime\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"assemblyBinding\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"satelliteassemblies\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"startup\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"system.codedom\" type=\"System.CodeDom.Compiler.CodeDomConfigurationHandler, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.data\" type=\"System.Data.Common.DbProviderFactoriesConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.data.dataset\" type=\"System.Configuration.NameValueFileSectionHandler, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" restartOnExternalChanges=\"false\" /&gt; &lt;section name=\"system.data.odbc\" type=\"System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.data.oledb\" type=\"System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.data.oracleclient\" type=\"System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.data.sqlclient\" type=\"System.Data.Common.DbProviderConfigurationHandler, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.diagnostics\" type=\"System.Diagnostics.SystemDiagnosticsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"system.runtime.remoting\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"system.windows.forms\" type=\"System.Windows.Forms.WindowsFormsSection, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"windows\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowLocation=\"false\" /&gt; &lt;section name=\"uri\" type=\"System.Configuration.UriSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;sectionGroup name=\"system.runtime.caching\" type=\"System.Runtime.Caching.Configuration.CachingSectionGroup, System.Runtime.Caching, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"&gt; &lt;section name=\"memoryCache\" type=\"System.Runtime.Caching.Configuration.MemoryCacheSection, System.Runtime.Caching, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.xml.serialization\" type=\"System.Xml.Serialization.Configuration.SerializationSectionGroup, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"schemaImporterExtensions\" type=\"System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"dateTimeSerialization\" type=\"System.Xml.Serialization.Configuration.DateTimeSerializationSection, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"xmlSerializer\" type=\"System.Xml.Serialization.Configuration.XmlSerializerSection, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.net\" type=\"System.Net.Configuration.NetSectionGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"authenticationModules\" type=\"System.Net.Configuration.AuthenticationModulesSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"connectionManagement\" type=\"System.Net.Configuration.ConnectionManagementSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"defaultProxy\" type=\"System.Net.Configuration.DefaultProxySection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;sectionGroup name=\"mailSettings\" type=\"System.Net.Configuration.MailSettingsSectionGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"smtp\" type=\"System.Net.Configuration.SmtpSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;/sectionGroup&gt; &lt;section name=\"requestCaching\" type=\"System.Net.Configuration.RequestCachingSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"settings\" type=\"System.Net.Configuration.SettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"webRequestModules\" type=\"System.Net.Configuration.WebRequestModulesSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.runtime.serialization\" type=\"System.Runtime.Serialization.Configuration.SerializationSectionGroup, System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"dataContractSerializer\" type=\"System.Runtime.Serialization.Configuration.DataContractSerializerSection, System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.serviceModel\" type=\"System.ServiceModel.Configuration.ServiceModelSectionGroup, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"behaviors\" type=\"System.ServiceModel.Configuration.BehaviorsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"bindings\" type=\"System.ServiceModel.Configuration.BindingsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"client\" type=\"System.ServiceModel.Configuration.ClientSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"comContracts\" type=\"System.ServiceModel.Configuration.ComContractsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"commonBehaviors\" type=\"System.ServiceModel.Configuration.CommonBehaviorsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" allowDefinition=\"MachineOnly\" allowExeDefinition=\"MachineOnly\" /&gt; &lt;section name=\"diagnostics\" type=\"System.ServiceModel.Configuration.DiagnosticSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"extensions\" type=\"System.ServiceModel.Configuration.ExtensionsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"machineSettings\" type=\"System.ServiceModel.Configuration.MachineSettingsSection, SMDiagnostics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" allowDefinition=\"MachineOnly\" allowExeDefinition=\"MachineOnly\" /&gt; &lt;section name=\"protocolMapping\" type=\"System.ServiceModel.Configuration.ProtocolMappingSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"serviceHostingEnvironment\" type=\"System.ServiceModel.Configuration.ServiceHostingEnvironmentSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"services\" type=\"System.ServiceModel.Configuration.ServicesSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"standardEndpoints\" type=\"System.ServiceModel.Configuration.StandardEndpointsSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"routing\" type=\"System.ServiceModel.Routing.Configuration.RoutingSection, System.ServiceModel.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;section name=\"tracking\" type=\"System.ServiceModel.Activities.Tracking.Configuration.TrackingSection, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.serviceModel.activation\" type=\"System.ServiceModel.Activation.Configuration.ServiceModelActivationSectionGroup, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"&gt; &lt;section name=\"diagnostics\" type=\"System.ServiceModel.Activation.Configuration.DiagnosticSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"net.pipe\" type=\"System.ServiceModel.Activation.Configuration.NetPipeSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;section name=\"net.tcp\" type=\"System.ServiceModel.Activation.Configuration.NetTcpSection, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.transactions\" type=\"System.Transactions.Configuration.TransactionsSectionGroup, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null\"&gt; &lt;section name=\"defaultSettings\" type=\"System.Transactions.Configuration.DefaultSettingsSection, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null\" /&gt; &lt;section name=\"machineSettings\" type=\"System.Transactions.Configuration.MachineSettingsSection, System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null\" allowDefinition=\"MachineOnly\" allowExeDefinition=\"MachineOnly\" /&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.web\" type=\"System.Web.Configuration.SystemWebSectionGroup, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"&gt; &lt;section name=\"anonymousIdentification\" type=\"System.Web.Configuration.AnonymousIdentificationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"authentication\" type=\"System.Web.Configuration.AuthenticationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"authorization\" type=\"System.Web.Configuration.AuthorizationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"browserCaps\" type=\"System.Web.Configuration.HttpCapabilitiesSectionHandler, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"clientTarget\" type=\"System.Web.Configuration.ClientTargetSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"compilation\" type=\"System.Web.Configuration.CompilationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" requirePermission=\"false\" /&gt; &lt;section name=\"customErrors\" type=\"System.Web.Configuration.CustomErrorsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"deployment\" type=\"System.Web.Configuration.DeploymentSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineOnly\" /&gt; &lt;section name=\"deviceFilters\" type=\"System.Web.Mobile.DeviceFiltersSection, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"fullTrustAssemblies\" type=\"System.Web.Configuration.FullTrustAssembliesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"globalization\" type=\"System.Web.Configuration.GlobalizationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"healthMonitoring\" type=\"System.Web.Configuration.HealthMonitoringSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"hostingEnvironment\" type=\"System.Web.Configuration.HostingEnvironmentSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"httpCookies\" type=\"System.Web.Configuration.HttpCookiesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"httpHandlers\" type=\"System.Web.Configuration.HttpHandlersSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"httpModules\" type=\"System.Web.Configuration.HttpModulesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"httpRuntime\" type=\"System.Web.Configuration.HttpRuntimeSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"identity\" type=\"System.Web.Configuration.IdentitySection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"machineKey\" type=\"System.Web.Configuration.MachineKeySection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"membership\" type=\"System.Web.Configuration.MembershipSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"mobileControls\" type=\"System.Web.UI.MobileControls.MobileControlsSection, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"pages\" type=\"System.Web.Configuration.PagesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" requirePermission=\"false\" /&gt; &lt;section name=\"partialTrustVisibleAssemblies\" type=\"System.Web.Configuration.PartialTrustVisibleAssembliesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"processModel\" type=\"System.Web.Configuration.ProcessModelSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineOnly\" allowLocation=\"false\" /&gt; &lt;section name=\"profile\" type=\"System.Web.Configuration.ProfileSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"protocols\" type=\"System.Web.Configuration.ProtocolsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToWebRoot\" /&gt; &lt;section name=\"roleManager\" type=\"System.Web.Configuration.RoleManagerSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"securityPolicy\" type=\"System.Web.Configuration.SecurityPolicySection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"sessionPageState\" type=\"System.Web.Configuration.SessionPageStateSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"sessionState\" type=\"System.Web.Configuration.SessionStateSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"siteMap\" type=\"System.Web.Configuration.SiteMapSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"trace\" type=\"System.Web.Configuration.TraceSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"trust\" type=\"System.Web.Configuration.TrustSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"urlMappings\" type=\"System.Web.Configuration.UrlMappingsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"webControls\" type=\"System.Web.Configuration.WebControlsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"webParts\" type=\"System.Web.Configuration.WebPartsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"webServices\" type=\"System.Web.Services.Configuration.WebServicesSection, System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;section name=\"xhtmlConformance\" type=\"System.Web.Configuration.XhtmlConformanceSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;sectionGroup name=\"caching\" type=\"System.Web.Configuration.SystemWebCachingSectionGroup, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"&gt; &lt;section name=\"cache\" type=\"System.Web.Configuration.CacheSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"outputCache\" type=\"System.Web.Configuration.OutputCacheSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"outputCacheSettings\" type=\"System.Web.Configuration.OutputCacheSettingsSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"sqlCacheDependency\" type=\"System.Web.Configuration.SqlCacheDependencySection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" allowDefinition=\"MachineToApplication\" /&gt; &lt;/sectionGroup&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.web.extensions\" type=\"System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"&gt; &lt;sectionGroup name=\"scripting\" type=\"System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"&gt; &lt;section name=\"scriptResourceHandler\" type=\"System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" requirePermission=\"false\" allowDefinition=\"MachineToApplication\" /&gt; &lt;sectionGroup name=\"webServices\" type=\"System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"&gt; &lt;section name=\"jsonSerialization\" type=\"System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" requirePermission=\"false\" allowDefinition=\"Everywhere\" /&gt; &lt;section name=\"profileService\" type=\"System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" requirePermission=\"false\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"authenticationService\" type=\"System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" requirePermission=\"false\" allowDefinition=\"MachineToApplication\" /&gt; &lt;section name=\"roleService\" type=\"System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" requirePermission=\"false\" allowDefinition=\"MachineToApplication\" /&gt; &lt;/sectionGroup&gt; &lt;/sectionGroup&gt; &lt;/sectionGroup&gt; &lt;sectionGroup name=\"system.xaml.hosting\" type=\"System.Xaml.Hosting.Configuration.XamlHostingSectionGroup, System.Xaml.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"&gt; &lt;section name=\"httpHandlers\" type=\"System.Xaml.Hosting.Configuration.XamlHostingSection, System.Xaml.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;/sectionGroup&gt; &lt;section name=\"system.webServer\" type=\"System.Configuration.IgnoreSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;/configSections&gt; &lt;configProtectedData defaultProvider=\"RsaProtectedConfigurationProvider\"&gt; &lt;providers&gt; &lt;add name=\"RsaProtectedConfigurationProvider\" type=\"System.Configuration.RsaProtectedConfigurationProvider,System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" description=\"Uses RsaCryptoServiceProvider to encrypt and decrypt\" keyContainerName=\"NetFrameworkConfigurationKey\" cspProviderName=\"\" useMachineContainer=\"true\" useOAEP=\"false\" /&gt; &lt;add name=\"DataProtectionConfigurationProvider\" type=\"System.Configuration.DpapiProtectedConfigurationProvider,System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" description=\"Uses CryptProtectData and CryptUnProtectData Windows APIs to encrypt and decrypt\" useMachineProtection=\"true\" keyEntropy=\"\" /&gt; &lt;/providers&gt; &lt;/configProtectedData&gt; &lt;runtime /&gt; &lt;connectionStrings&gt; &lt;add name=\"LocalSqlServer\" connectionString=\"data source=.\\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|aspnetdb.mdf;User Instance=true\" providerName=\"System.Data.SqlClient\" /&gt; &lt;add name=\"OraAspNetConString\" connectionString=\" \" /&gt; &lt;/connectionStrings&gt; &lt;system.data&gt; &lt;DbProviderFactories&gt; &lt;add name=\"ODP.NET, Managed Driver\" invariant=\"Oracle.ManagedDataAccess.Client\" description=\"Oracle Data Provider for .NET, Managed Driver\" type=\"Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342\" /&gt; &lt;add name=\"ODP.NET, Unmanaged Driver\" invariant=\"Oracle.DataAccess.Client\" description=\"Oracle Data Provider for .NET, Unmanaged Driver\" type=\"Oracle.DataAccess.Client.OracleClientFactory, Oracle.DataAccess, Version=2.111.7.20, Culture=neutral, PublicKeyToken=89b483f429c47342\" /&gt; &lt;add name=\"Microsoft SQL Server Compact Data Provider 4.0\" invariant=\"System.Data.SqlServerCe.4.0\" description=\".NET Framework Data Provider for Microsoft SQL Server Compact\" type=\"System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91\" /&gt; &lt;/DbProviderFactories&gt; &lt;/system.data&gt; &lt;system.serviceModel&gt; &lt;extensions&gt; &lt;behaviorExtensions&gt; &lt;add name=\"persistenceProvider\" type=\"System.ServiceModel.Configuration.PersistenceProviderElement, System.WorkflowServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"workflowRuntime\" type=\"System.ServiceModel.Configuration.WorkflowRuntimeElement, System.WorkflowServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"enableWebScript\" type=\"System.ServiceModel.Configuration.WebScriptEnablingElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"webHttp\" type=\"System.ServiceModel.Configuration.WebHttpElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"serviceDiscovery\" type=\"System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"endpointDiscovery\" type=\"System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"etwTracking\" type=\"System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"routing\" type=\"System.ServiceModel.Routing.Configuration.RoutingExtensionElement, System.ServiceModel.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"soapProcessing\" type=\"System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement, System.ServiceModel.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"workflowIdle\" type=\"System.ServiceModel.Activities.Configuration.WorkflowIdleElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"workflowUnhandledException\" type=\"System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"bufferedReceive\" type=\"System.ServiceModel.Activities.Configuration.BufferedReceiveElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"sendMessageChannelCache\" type=\"System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"sqlWorkflowInstanceStore\" type=\"System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"workflowInstanceManagement\" type=\"System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"Microsoft.VisualStudio.Diagnostics.ServiceModelSink.Behavior\" type=\"Microsoft.VisualStudio.Diagnostics.ServiceModelSink.Behavior, Microsoft.VisualStudio.Diagnostics.ServiceModelSink, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;/behaviorExtensions&gt; &lt;bindingElementExtensions&gt; &lt;add name=\"webMessageEncoding\" type=\"System.ServiceModel.Configuration.WebMessageEncodingElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"context\" type=\"System.ServiceModel.Configuration.ContextBindingElementExtensionElement, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;add name=\"byteStreamMessageEncoding\" type=\"System.ServiceModel.Configuration.ByteStreamMessageEncodingElement, System.ServiceModel.Channels, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"discoveryClient\" type=\"System.ServiceModel.Discovery.Configuration.DiscoveryClientElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;/bindingElementExtensions&gt; &lt;bindingExtensions&gt; &lt;add name=\"wsHttpContextBinding\" type=\"System.ServiceModel.Configuration.WSHttpContextBindingCollectionElement, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;add name=\"netTcpContextBinding\" type=\"System.ServiceModel.Configuration.NetTcpContextBindingCollectionElement, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;add name=\"webHttpBinding\" type=\"System.ServiceModel.Configuration.WebHttpBindingCollectionElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"basicHttpContextBinding\" type=\"System.ServiceModel.Configuration.BasicHttpContextBindingCollectionElement, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" /&gt; &lt;/bindingExtensions&gt; &lt;endpointExtensions&gt; &lt;add name=\"dynamicEndpoint\" type=\"System.ServiceModel.Discovery.Configuration.DynamicEndpointCollectionElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"discoveryEndpoint\" type=\"System.ServiceModel.Discovery.Configuration.DiscoveryEndpointCollectionElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"udpDiscoveryEndpoint\" type=\"System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointCollectionElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"announcementEndpoint\" type=\"System.ServiceModel.Discovery.Configuration.AnnouncementEndpointCollectionElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"udpAnnouncementEndpoint\" type=\"System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointCollectionElement, System.ServiceModel.Discovery, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"workflowControlEndpoint\" type=\"System.ServiceModel.Activities.Configuration.WorkflowControlEndpointCollectionElement, System.ServiceModel.Activities, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"webHttpEndpoint\" type=\"System.ServiceModel.Configuration.WebHttpEndpointCollectionElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;add name=\"webScriptEndpoint\" type=\"System.ServiceModel.Configuration.WebScriptEndpointCollectionElement, System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" /&gt; &lt;/endpointExtensions&gt; &lt;/extensions&gt; &lt;client&gt; &lt;metadata&gt; &lt;policyImporters&gt; &lt;extension type=\"System.ServiceModel.Channels.ContextBindingElementImporter, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\" /&gt; &lt;/policyImporters&gt; &lt;wsdlImporters&gt; &lt;extension type=\"System.ServiceModel.Channels.ContextBindingElementImporter, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\" /&gt; &lt;/wsdlImporters&gt; &lt;/metadata&gt; &lt;/client&gt; &lt;tracking&gt; &lt;profiles&gt; &lt;trackingProfile name=\"\"&gt; &lt;workflow activityDefinitionId=\"*\"&gt; &lt;workflowInstanceQueries&gt; &lt;workflowInstanceQuery&gt; &lt;states&gt; &lt;state name=\"*\" /&gt; &lt;/states&gt; &lt;/workflowInstanceQuery&gt; &lt;/workflowInstanceQueries&gt; &lt;activityStateQueries&gt; &lt;activityStateQuery activityName=\"*\"&gt; &lt;states&gt; &lt;state name=\"Faulted\" /&gt; &lt;/states&gt; &lt;/activityStateQuery&gt; &lt;/activityStateQueries&gt; &lt;faultPropagationQueries&gt; &lt;faultPropagationQuery faultSourceActivityName=\"*\" faultHandlerActivityName=\"*\" /&gt; &lt;/faultPropagationQueries&gt; &lt;/workflow&gt; &lt;/trackingProfile&gt; &lt;/profiles&gt; &lt;/tracking&gt; &lt;commonBehaviors&gt; &lt;endpointBehaviors&gt; &lt;Microsoft.VisualStudio.Diagnostics.ServiceModelSink.Behavior /&gt; &lt;/endpointBehaviors&gt; &lt;serviceBehaviors&gt; &lt;Microsoft.VisualStudio.Diagnostics.ServiceModelSink.Behavior /&gt; &lt;/serviceBehaviors&gt; &lt;/commonBehaviors&gt; &lt;/system.serviceModel&gt; &lt;system.web&gt; &lt;processModel autoConfig=\"true\" /&gt; &lt;httpHandlers /&gt; &lt;membership&gt; &lt;providers&gt; &lt;add name=\"OracleMembershipProvider\" type=\"Oracle.Web.Security.OracleMembershipProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" applicationName=\"\" enablePasswordRetrieval=\"false\" enablePasswordReset=\"true\" requiresQuestionAndAnswer=\"true\" requiresUniqueEmail=\"false\" passwordFormat=\"Hashed\" maxInvalidPasswordAttempts=\"5\" minRequiredPasswordLength=\"7\" minRequiredNonalphanumericCharacters=\"1\" passwordAttemptWindow=\"10\" passwordStrengthRegularExpression=\"\" /&gt; &lt;add name=\"AspNetSqlMembershipProvider\" type=\"System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" connectionStringName=\"LocalSqlServer\" enablePasswordRetrieval=\"false\" enablePasswordReset=\"true\" requiresQuestionAndAnswer=\"true\" applicationName=\"/\" requiresUniqueEmail=\"false\" passwordFormat=\"Hashed\" maxInvalidPasswordAttempts=\"5\" minRequiredPasswordLength=\"7\" minRequiredNonalphanumericCharacters=\"1\" passwordAttemptWindow=\"10\" passwordStrengthRegularExpression=\"\" /&gt; &lt;/providers&gt; &lt;/membership&gt; &lt;profile&gt; &lt;providers&gt; &lt;add name=\"OracleProfileProvider\" type=\"Oracle.Web.Profile.OracleProfileProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" applicationName=\"\" /&gt; &lt;add name=\"AspNetSqlProfileProvider\" connectionStringName=\"LocalSqlServer\" applicationName=\"/\" type=\"System.Web.Profile.SqlProfileProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;/providers&gt; &lt;/profile&gt; &lt;roleManager&gt; &lt;providers&gt; &lt;add name=\"OracleRoleProvider\" type=\"Oracle.Web.Security.OracleRoleProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" applicationName=\"\" /&gt; &lt;add name=\"AspNetSqlRoleProvider\" connectionStringName=\"LocalSqlServer\" applicationName=\"/\" type=\"System.Web.Security.SqlRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;add name=\"AspNetWindowsTokenRoleProvider\" applicationName=\"/\" type=\"System.Web.Security.WindowsTokenRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt; &lt;/providers&gt; &lt;/roleManager&gt; &lt;siteMap&gt; &lt;providers&gt; &lt;add name=\"OracleSiteMapProvider\" type=\"Oracle.Web.SiteMap.OracleSiteMapProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" applicationName=\"\" securityTrimmingEnabled=\"true\" /&gt; &lt;/providers&gt; &lt;/siteMap&gt; &lt;webParts&gt; &lt;personalization&gt; &lt;providers&gt; &lt;add name=\"OraclePersonalizationProvider\" type=\"Oracle.Web.Personalization.OraclePersonalizationProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" applicationName=\"\" /&gt; &lt;/providers&gt; &lt;/personalization&gt; &lt;/webParts&gt; &lt;healthMonitoring&gt; &lt;providers&gt; &lt;add name=\"OracleWebEventProvider\" type=\"Oracle.Web.Management.OracleWebEventProvider, Oracle.Web, Version=4.121.2.1, Culture=neutral, PublicKeyToken=89b483f429c47342\" connectionStringName=\"OraAspNetConString\" buffer=\"true\" bufferMode=\"OracleNotification\" /&gt; &lt;/providers&gt; &lt;/healthMonitoring&gt; &lt;/system.web&gt; &lt;oracle.manageddataaccess.client&gt; &lt;version number=\"4.121.2.0\"&gt; &lt;settings&gt; &lt;setting name=\"TNS_ADMIN\" value=\"G:\\app\\client\\123\\product\\12.1.0\\client_2\\network\\admin\" /&gt; &lt;/settings&gt; &lt;/version&gt; &lt;/oracle.manageddataaccess.client&gt;&lt;/configuration&gt;","link":"/2019/04/22/Windows 同时安装32位和64位 Oracle 客户端数据驱动/"},{"title":"系统配置文件","text":"Win常用工具相关合集 office 2019 下载地址1ed2k://|file|cn_office_professional_plus_2019_x86_x64_dvd_5e5be643.iso|3775004672|1E4FFA5240F21F60DC027F73F1C62FF4|/ 专业工作站版数字激活slmgr.vbs /ipk DXG7C-N36C4-C4HTG-X4T3X-2YV77 1、以管理员身份打开 Powershell、CMD 窗口，输入 slmgr.vbs /ipk DXG7C-N36C4-C4HTG-X4T3X-2YV77，请不要运行 slmgr.vbs /ato 2、以管理员身份运行 hwidgen.mk3.exe，点 patch，耗时比较长，需要耐心等待，如果看到第3个图片中的内容，就表示已经成功获得数字激活了(查看第2个图片)。 资源管理器反应慢(清理资源管理器注册表) 开始-运行：输入regedit回车。 打开Hkey_Local_Machine分支 依次找到SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer 删除MyComputer下的所以项目和键值。 重新启动电脑。 Java 环境配置 Key Value JAVA_HOME C:\\Developer\\Java\\jdk1.7.0_80 Path JAVA_HOME%\\bin Path JAVA_HOME%\\jre\\bin ClassPath .;%Java_Home%\\bin;%Java_Home%\\lib\\dt.jar;%Java_Home%\\lib\\tools.jar 文件路径 Function URL Remarks hosts文件路径 C:\\Windows\\System32\\drivers\\etc win10聚焦图片路径 C:\\Users\\SouthBySouthwest\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets Microsoft.Windows.ContentDeliveryManager_ cw5n1h2txyewy 不变 每隔一段时间随机生成 win10地图应用路径 C:\\ProgramData\\Microsoft 自带壁纸 C:\\Windows\\Web\\4K\\Wallpaper\\Windows 系统命令| Command | Remarks | | :————: | :————————————–: || slmgr.vbs -dlv | 查询激活信息 激活ID 安装ID 激活截止日期 || slmgr.vbs -dli | 查询系统版本 产品密钥 许可证状态 || slmgr.vbs -xpr | 查看是否永久激活 || winver | 查看系统内核以及注册用户 || sfc /scannow | 修复系统文件 || .NEt3.5 | dism.exe /online /enable-feature /featurename:NetFX3 /Source:F:\\sources\\sxs || 重启资源管理器 | taskkill /f /im explorer.exe &amp; start explorer.exe | 密钥激活码 Software Version key Visual Studio 2015 企业版 HM6NR-QXX7C-DFW2Y-8B82K-WTYJV VMware Workstation 15 UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA VF750-4MX5Q-488DQ-9WZE9-ZY2D6 UU54R-FVD91-488PP-7NNGC-ZFAX6 YC74H-FGF92-081VZ-R5QNG-P6RY4 VMware Workstation 12 YC34H-6WWDK-085MQ-JYPNX-NZRA2 VF5XA-FNDDJ-085GZ-4NXZ9-N20E6 UC5MR-8NE16-H81WY-R7QGV-QG2D8 ZG1WH-ATY96-H80QP-X7PEX-Y30V4 AA3E0-0VDE1-0893Z-KGZ59-QGAVF Visual Studio 2017 企业版 NJVYC-BMHX2-G77MM-4XJMR-6Q8QF 专业版 KBJFW-NXHK6-W4WJM-CRMQB-G3CDH PL/SQL developer 12.07 Product Code kfj6yg6rfyhqcha6cbgs6fsw3kyje7a6qr serial Number 276182 Password xs374ca Microsoft expression Studio 4 ultimate 6WDDQ-K7D4F-GQGF4-2VYBJ-8K6MB 腾讯视频转换MP4拷贝缓存文件到一个文件夹，然后对该文件夹执行以下命令copy/b *.tdl 1.mp4 隐藏盘符注册表 ： 计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer NoDrives的DWORD(32位)值 A：1B：2C：4D：8E：16F：32G：64H：128I：256J：512K：1024L：2048M：4096N：8192O：16384P：32768Q：65536R：131072S：262144T：524288U：1048576V：2097152W：4194304X：8388608Y：16777216Z：33554432","link":"/2019/04/17/系统配置文件/"},{"title":"IDEA2017 SSM框架整合搭建 Maven + Spring + SpringMVC + MyBatis","text":"寄语：本文采用IDEA开发，建议按着文章顺序先搭建项目，只要按着目录结构先把目录建好就是复制粘贴的问题。内里代码也有注释，先搭建好，在慢慢看着代码思考，想想问什么这么做？即使你是初学者，按着一步一步也是可以搭建整合的。 步骤目录 1.创建Maven项目 1.1-1.6 看图操作 2.配置文件 2.1pom.xml 2.2jdbc.properties 2.3log4j.properties 2.4spring-mvc.xml 2.5spring-mybatis.xml 2.6web.xml 3.创建demo 3.1Controller 3.2 Dao 3.3 model 3.3.1数据库文件 3.4 Service 3.4.1 ServiceImpl 4.项目部署 4.1 识别目录 4.3 创建一个Tomca 4.4 配置访问根路径 4.5 浏览器访问 ##1. 创建maven项目 ####1.1 File -&gt; New Module，进入创建项目窗口。 ####1.2 点击Next，填写GroupId、ArtifactId和Version ####1.3 接着下一步，这里需要注在Properties中添加一个参数archetypeCatalog=internal ####1.4 填写Module name 创建完成 生成项目骨架：Maven在自动下载所需要的jar包,以下代码段可以选择跳过，为控制台输出Maven的log123456789101112131415161718192021222324252627282930313233343536373839404142434445C:\\Develop\\jdk1.8.0_25\\bin\\java -Dmaven.multiModuleProjectDirectory=C:\\Users\\NINTH\\AppData\\Local\\Temp\\archetypetmp -Dmaven.home=C:\\Develop\\IDEA_2017.2.5\\plugins\\maven\\lib\\maven3 -Dclassworlds.conf=C:\\Develop\\IDEA_2017.2.5\\plugins\\maven\\lib\\maven3\\bin\\m2.conf -Dfile.encoding=UTF-8 -classpath C:\\Develop\\IDEA_2017.2.5\\plugins\\maven\\lib\\maven3\\boot\\plexus-classworlds-2.5.2.jar org.codehaus.classworlds.Launcher -Didea.version=2017.2.5 -DinteractiveMode=false -DgroupId=com.ninth.web -DartifactId=web-ssm -Dversion=1.0-SNAPSHOT -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=RELEASE org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate[INFO] Scanning for projects...Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xmlDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml (825 B at 0.2 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.0.1/maven-archetype-plugin-3.0.1.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.0.1/maven-archetype-plugin-3.0.1.pom (10 KB at 21.2 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/archetype/maven-archetype/3.0.1/maven-archetype-3.0.1.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/archetype/maven-archetype/3.0.1/maven-archetype-3.0.1.pom (13 KB at 20.8 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/30/maven-parent-30.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/30/maven-parent-30.pom (41 KB at 52.7 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/apache/18/apache-18.pom (16 KB at 30.6 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.0.1/maven-archetype-plugin-3.0.1.jarDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.0.1/maven-archetype-plugin-3.0.1.jar (94 KB at 82.6 KB/sec)[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Maven Stub Project (No POM) 1[INFO] ------------------------------------------------------------------------[INFO][INFO] &gt;&gt;&gt; maven-archetype-plugin:3.0.1:generate (default-cli) &gt; generate-sources @ standalone-pom &gt;&gt;&gt;[INFO][INFO] &lt;&lt;&lt; maven-archetype-plugin:3.0.1:generate (default-cli) &lt; generate-sources @ standalone-pom &lt;&lt;&lt;[INFO][INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.0.1/archetype-catalog-3.0.1.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.0.1/archetype-catalog-3.0.1.pom (2 KB at 4.6 KB/sec)....................中间省略一大部分.........................[INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-webapp:RELEASE[INFO] ----------------------------------------------------------------------------[INFO] Parameter: basedir, Value: C:\\Users\\NINTH\\AppData\\Local\\Temp\\archetypetmp[INFO] Parameter: package, Value: com.ninth.web[INFO] Parameter: groupId, Value: com.ninth.web[INFO] Parameter: artifactId, Value: web-ssm[INFO] Parameter: packageName, Value: com.ninth.web[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] project created from Old (1.x) Archetype in dir: C:\\Users\\NINTH\\AppData\\Local\\Temp\\archetypetmp\\web-ssm[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 01:29 min[INFO] Finished at: 2017-10-27T16:41:21+08:00[INFO] Final Memory: 15M/287M[INFO] ------------------------------------------------------------------------[INFO] Maven execution finished ####1.6 Maven骨架搭建之后，个人建议可以先按着以下目录图把项目所有需要的文件准备好，继续看下去就是把代码复制到各个文件，非常简单方便。 ##2.项目配置 2.1项目配置文件 pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.heitian.web&lt;/groupId&gt; &lt;artifactId&gt;web-ssm&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;web-ssm Maven Webapp&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;!-- spring版本号 --&gt; &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt; &lt;!-- mybatis版本号 --&gt; &lt;mybatis.version&gt;3.2.8&lt;/mybatis.version&gt; &lt;!-- mysql驱动版本号 --&gt; &lt;mysql-driver.version&gt;5.1.29&lt;/mysql-driver.version&gt; &lt;!-- log4j日志包版本号 --&gt; &lt;slf4j.version&gt;1.7.18&lt;/slf4j.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- 添加jstl依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; &lt;version&gt;7.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加junit4依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;!-- 指定范围，在测试时才会加载 --&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 添加spring核心依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mybatis依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;${mybatis.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mybatis/spring整合包依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加mysql驱动依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;${mysql-driver.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加数据库连接池依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加fastjson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.1.41&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 添加日志相关jar包 --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;${slf4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;${slf4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- log end --&gt; &lt;!-- 映入JSON --&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt; &lt;version&gt;1.9.13&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;web-ssm&lt;/finalName&gt; &lt;/build&gt;&lt;/project&gt; 2.2 配置JDBC文件 jdbc.properties123456789101112131415driverClasss=com.mysql.jdbc.Driver jdbcUrl=jdbc:mysql://localhost:3306/db_ssm?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull username=root password=root #定义初始连接数 initialSize=0 #定义最大连接数 maxActive=20 #定义最大空闲 maxIdle=20 #定义最小空闲 minIdle=1 #定义最长等待时间 maxWait=60000 2.3 log4j 配置文件 log4j.properties12345678910111213141516log4j.rootLogger=INFO,Console,File #控制台日志 log4j.appender.Console=org.apache.log4j.ConsoleAppender log4j.appender.Console.Target=System.out log4j.appender.Console.layout=org.apache.log4j.PatternLayout log4j.appender.Console.layout.ConversionPattern=[%p][%t][%d{yyyy-MM-dd HH\\:mm\\:ss}][%C] - %m%n #普通文件日志 log4j.appender.File=org.apache.log4j.RollingFileAppender log4j.appender.File.File=logs/ssm.log log4j.appender.File.MaxFileSize=10MB #输出日志，如果换成DEBUG表示输出DEBUG以上级别日志 log4j.appender.File.Threshold=ALL log4j.appender.File.layout=org.apache.log4j.PatternLayout log4j.appender.File.layout.ConversionPattern=[%p][%t][%d{yyyy-MM-dd HH\\:mm\\:ss}][%C] - %m%n 2.4配置 springmvc文件 spring-mvc.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\"&gt; &lt;!-- 自动扫描 @Controller--&gt; &lt;context:component-scan base-package=\"com.heitian.ssm.controller\"/&gt; &lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt; &lt;bean id=\"mappingJacksonHttpMessageConverter\" class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"&gt; &lt;property name=\"supportedMediaTypes\"&gt; &lt;list&gt; &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt; &lt;bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt; &lt;property name=\"messageConverters\"&gt; &lt;list&gt; &lt;ref bean=\"mappingJacksonHttpMessageConverter\"/&gt; &lt;!-- JSON转换器 --&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 定义跳转的文件的前后缀 ，视图模式配置 --&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt; &lt;property name=\"suffix\" value=\".jsp\"/&gt; &lt;/bean&gt; &lt;!-- 文件上传配置 --&gt; &lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt; &lt;!-- 默认编码 --&gt; &lt;property name=\"defaultEncoding\" value=\"UTF-8\"/&gt; &lt;!-- 上传文件大小限制为31M，31*1024*1024 --&gt; &lt;property name=\"maxUploadSize\" value=\"32505856\"/&gt; &lt;!-- 内存中的最大值 --&gt; &lt;property name=\"maxInMemorySize\" value=\"4096\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 2.5 配置spring和mybatis整合所需的配置文件 spring-mybatis.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt; &lt;!-- 自动扫描 --&gt; &lt;context:component-scan base-package=\"com.heitian.ssm\"/&gt; &lt;!-- 第一种方式：加载一个properties文件 --&gt; &lt;bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name=\"location\" value=\"classpath:jdbc.properties\"/&gt; &lt;/bean&gt; &lt;!-- 第二种方式：加载多个properties文件 &lt;bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\"&gt; &lt;property name=\"locations\"&gt; &lt;list&gt; &lt;value&gt;classpath:jdbc.properties&lt;/value&gt; &lt;value&gt;classpath:common.properties&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name=\"fileEncoding\" value=\"UTF-8\"/&gt; &lt;/bean&gt; &lt;bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\"&gt; &lt;property name=\"properties\" ref=\"configProperties\"/&gt; &lt;/bean&gt; --&gt; &lt;!-- 配置数据源 --&gt; &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\"&gt; &lt;property name=\"driverClassName\" value=\"${driverClasss}\"/&gt; &lt;property name=\"url\" value=\"${jdbcUrl}\"/&gt; &lt;property name=\"username\" value=\"${username}\"/&gt; &lt;property name=\"password\" value=\"${password}\"/&gt; &lt;!-- 初始化连接大小 --&gt; &lt;property name=\"initialSize\" value=\"${initialSize}\"&gt;&lt;/property&gt; &lt;!-- 连接池最大数量 --&gt; &lt;property name=\"maxActive\" value=\"${maxActive}\"&gt;&lt;/property&gt; &lt;!-- 连接池最大空闲 --&gt; &lt;property name=\"maxIdle\" value=\"${maxIdle}\"&gt;&lt;/property&gt; &lt;!-- 连接池最小空闲 --&gt; &lt;property name=\"minIdle\" value=\"${minIdle}\"&gt;&lt;/property&gt; &lt;!-- 获取连接最大等待时间 --&gt; &lt;property name=\"maxWait\" value=\"${maxWait}\"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 --&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;!-- 自动扫描mapping.xml文件 --&gt; &lt;property name=\"mapperLocations\" value=\"classpath:mapping/*.xml\"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;property name=\"basePackage\" value=\"com.heitian.ssm.dao\"/&gt; &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; &lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;&lt;/beans&gt; 2.6web.xml配置文件 web.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\"&gt; &lt;display-name&gt;web-ssm&lt;/display-name&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-mybatis.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt; &lt;/context-param&gt; &lt;!-- 编码过滤器 --&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- spring监听器 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- 防止spring内存溢出监听器，比如quartz --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- spring mvc servlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;async-supported&gt;true&lt;/async-supported&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;!-- 此处也可以配置成 *.do 形式 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;/index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- session配置 --&gt; &lt;session-config&gt; &lt;session-timeout&gt;15&lt;/session-timeout&gt; &lt;/session-config&gt;&lt;/web-app&gt; #3.做一个查询小demo 3.1Controller文件 UserController1234567891011121314151617181920212223242526272829303132333435package com.ninth.ssm.controller;import com.ninth.ssm.model.User;import com.ninth.ssm.service.UserService;import org.apache.log4j.Logger;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * Created by Ninth on 2017-10-28 15:29. * **/@Controller@RequestMapping(\"/user\")public class UserController { private Logger log = Logger.getLogger(UserController.class); @Resource private UserService userService; @RequestMapping(\"/showUser\") public String showUser(HttpServletRequest request, Model model){ log.info(\"查询所有用户信息\"); List&lt;User&gt; userList = userService.getAllUser(); model.addAttribute(\"userList\",userList); return \"showUser\"; }} ####3.2 dao文件 UserDao1234567891011121314151617181920212223package com.ninth.ssm.dao;import com.ninth.ssm.model.User;import org.apache.ibatis.annotations.Param;import org.springframework.stereotype.Repository;import java.util.List;/** * Created by Ninth on 2017-10-28 15:29. * **/@Repositorypublic interface UserDao { User selectUserById(@Param(\"userId\") Long userId); User selectUserByPhoneOrEmail(@Param(\"emailOrPhone\") String emailOrPhone, @Param(\"state\") Short state); List&lt;User&gt; selectAllUser();} ####3.3 model文件 User123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package com.ninth.ssm.model;import java.util.Date;/** * Created by Ninth on 2017-10-28 15:29. ***/public class User { private Long id; private String userName; private String userPhone; private String userEmail; private String userPwd; private String pwdSalt; private Date createTime; private Date modifyTime; private Short isDelete; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public String getUserPhone() { return userPhone; } public void setUserPhone(String userPhone) { this.userPhone = userPhone; } public String getUserEmail() { return userEmail; } public void setUserEmail(String userEmail) { this.userEmail = userEmail; } public String getUserPwd() { return userPwd; } public void setUserPwd(String userPwd) { this.userPwd = userPwd; } public String getPwdSalt() { return pwdSalt; } public void setPwdSalt(String pwdSalt) { this.pwdSalt = pwdSalt; } public Date getCreateTime() { return createTime; } public void setCreateTime(Date createTime) { this.createTime = createTime; } public Date getModifyTime() { return modifyTime; } public void setModifyTime(Date modifyTime) { this.modifyTime = modifyTime; } public Short getIsDelete() { return isDelete; } public void setIsDelete(Short isDelete) { this.isDelete = isDelete; }} ####3.3.1数据库文件在sql创建数据库db_ssm,然后运行目录下的sql文件，自动生成表，当然，你也可以手动建表。 12345678910111213141516171819202122232425SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `t_user`-- ----------------------------DROP TABLE IF EXISTS `t_user`;CREATE TABLE `t_user` ( `id` bigint(11) NOT NULL auto_increment, `user_name` varchar(255) default NULL COMMENT '用户名', `user_phone` varchar(20) default NULL COMMENT '手机号', `user_email` varchar(255) default NULL COMMENT '邮箱地址', `user_pwd` varchar(32) default NULL COMMENT '加盐后用户密码', `pwd_salt` varchar(6) default NULL COMMENT 'MD5盐', `create_time` datetime default NULL COMMENT '创建时间', `modify_time` datetime default NULL COMMENT '最后修改时间', `is_delete` tinyint(4) default NULL COMMENT '是否删除，0-未删除；1-已删除', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='用户登录表';-- ------------------------------ Records of t_user-- ----------------------------INSERT INTO `t_user` VALUES ('1', '赵大宝', '13285250574', '1045221654@qq.com', '05126a423a9379d529e4ee61a212fa55', 'KJUYT5', '2016-07-15 23:38:56', '2016-07-15 23:39:09', '0');INSERT INTO `t_user` VALUES ('2', '张三丰', '15985250574', '1198224554@qq.com', '98bd3a1bebde01ad363d3c5a0d1e56da', '656JHU', '2016-07-15 23:39:01', '2016-07-15 23:39:13', '0');INSERT INTO `t_user` VALUES ('3', '王尼玛', '13685250574', '1256221654@qq.com', '5470db9b63c354f6c8d628b80ae2f3c3', '89UIKQ', '2016-07-15 23:39:05', '2016-07-15 23:39:16', '0'); ####3.4 Service文件 UserService123456789101112131415161718package com.ninth.ssm.service;import com.ninth.ssm.model.User;import java.util.List;/** * Created by Ninth on 2017-10-28 15:30. * **/public interface UserService { List&lt;User&gt; getAllUser(); User getUserByPhoneOrEmail(String emailOrPhone, Short state); User getUserById(Long userId);} ####3.4.1 Service实现类 IUserServiceimpl123456789101112131415161718192021222324252627282930313233343536package com.ninth.ssm.service.impl;import com.ninth.ssm.dao.UserDao;import com.ninth.ssm.model.User;import com.ninth.ssm.service.UserService;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.util.List;/** * Created by Ninth on 2017-10-28 15:30. * **/@Service@Transactional(rollbackFor = Exception.class)public class UserServiceImpl implements UserService { @Resource private UserDao userDao; public User getUserById(Long userId) { return userDao.selectUserById(userId); } public User getUserByPhoneOrEmail(String emailOrPhone, Short state) { return userDao.selectUserByPhoneOrEmail(emailOrPhone,state); } public List&lt;User&gt; getAllUser() { return userDao.selectAllUser(); }} ####3.5 Mapper文件 UserMapper.xml1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;&lt;mapper namespace=\"com.ninth.ssm.dao.UserDao\"&gt; &lt;resultMap id=\"UserBaseMap\" type=\"com.ninth.ssm.model.User\"&gt; &lt;id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/&gt; &lt;result column=\"user_name\" property=\"userName\" jdbcType=\"VARCHAR\"/&gt; &lt;result column=\"user_phone\" property=\"userPhone\" jdbcType=\"VARCHAR\"/&gt; &lt;result column=\"user_email\" property=\"userEmail\" jdbcType=\"VARCHAR\"/&gt; &lt;result column=\"user_pwd\" property=\"userPwd\" jdbcType=\"VARCHAR\"/&gt; &lt;result column=\"pwd_salt\" property=\"pwdSalt\" jdbcType=\"VARCHAR\"/&gt; &lt;result column=\"create_time\" property=\"createTime\" jdbcType=\"DATE\"/&gt; &lt;result column=\"modify_time\" property=\"modifyTime\" jdbcType=\"DATE\"/&gt; &lt;result column=\"is_delete\" property=\"isDelete\" jdbcType=\"SMALLINT\"&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;select id=\"selectUserById\" parameterType=\"java.lang.Long\" resultMap=\"UserBaseMap\"&gt; SELECT * FROM t_user WHERE id = #{userId} &lt;/select&gt; &lt;select id=\"selectUserByPhoneOrEmail\" resultMap=\"UserBaseMap\"&gt; SELECT * FROM t_user WHERE user_email = #{emailOrPhone} OR user_phone = #{emailOrPhone} AND user_state = #{state} &lt;/select&gt; &lt;select id=\"selectAllUser\" resultMap=\"UserBaseMap\"&gt; SELECT * FROM t_user &lt;/select&gt;&lt;/mapper&gt; #4.项目部署 ####4.1 识别目录作用，选择File-Project Structure ####4.3 创建一个Tomcat容器实例，并把项目部署进去 ####4.4 项目所需配置好项目访问的根路径，然后启动Tomcat。 ####4.5 浏览器访问验证 浏览器输入http://localhost:8080/maver-ssm/user/showUser，出现下图，恭喜你","link":"/2017/10/28/IDEA2017 SSM框架整合搭建 Maven + Spring + SpringMVC + MyBatis/"},{"title":"如果你想起我，你会想到什么","text":"想到你想起我，胸口依然温热 原文电台录音 如 初見 最美好的大概还是那些初识的日子，是对彼此不全然地了解又极度渴望了解的那段时光，人生若只如初见。 昨晚又梦到你了，梦中的你一如既往，你背对着我，坐在我前面的座位上，我进门径直朝着那个位置走去，四目相视，我就愣在那儿停顿了好久，我鼓起勇气试着向你走近，却始终走不到那个位置，眼睁睁地看着你近在咫尺，却偏偏难以靠近，最后直到你消失不见。 我猛然醒来，睁眼，漆黑，宁静，我放空了几秒，然后才终于认清这是梦. 这是我这几年经常做的一个梦，七年了，我也没想到自己一个三分钟热度的人居然有一件事能坚持这么久，都说，梦中梦到的人，是因为心底觉得离得好远，所以我才会想要在梦中再见见你，可是，在梦中你也离得我好远，我怎么也靠不近你。 以前，大家都知道我喜欢你，都说毕业了就都散了，没有人知道我还爱你，这是属于我一个人的秘密。 后来的我一直单身，有时候朋友开玩笑说“你是不是还没有忘掉她”我说“怎么可能，我这么拿的起放的下的人，早忘了。”回答的干脆利落，以至于他们都信了，说的多了，连我都几乎信了。 可是，那为何会在听到你的名字时心头一震，为何会在不经意间想起你的时候心底隐隐难受，为何会在街上看到一个和你相似的背影心脏漏停一秒，为何总是会入我的梦，又为何对后来身边出现的人都无感，直至今日，你依然是我拒绝别人的理由。我没有在等你，却还是喜欢不上别人。 想知道你的消息，又怕你知道我还在惦记。会偷偷地跑到我们以前的教室，在我们经常走过的那条小路转转，呼吸着这里的空气，吹着和你一样的风，算不算相拥？ 相遇 No Impossible 几年间我们都没有再相见，在家乡遇见，也只敢远远看看你，怕给你造成打扰，这是我和你的默契，你不找我，我也不找你。 我想过很多我们相遇的场景，人生就是这么巧合，在这个我从没想过的地方，就这样偶遇了，在地铁站拥挤的人潮里，就这样偶遇了。 那天有朋友来了广州，逗趣的说道，不说出地址偶遇一下，我还说着在广州偶遇一个人是不可能的事。那么我和你是什么呢？缘分？什么是不可能？只能说No impossible 那一瞬间我脚软了，我顾不上那么多，只想走到你面前，逆着人流一直往回走。哆嗦的按着手机，通讯录一直把你放在首位，却急得一直没能拨出电话。 冲动的傻逼了一把，走到你面前，有很多话想要和你说，但这一刻一直没有结巴的我说不出一句话。我们比陌生人还要陌生了。 “偶尔会想起你，很健忘的一个人，唯独对你记忆犹新，他发的每一条动态都很关注，这动作一直在循环，我自己也一直知道，但是我改不了，你的一举一动一直缠绕着我，我也没想到一晃就是这么多年，这也许是我坚持最久的事情吧，白马过隙。” 再 後來 到了后来，突然发现，原来我们和大多数人都是既没坏到形同陌路，也没好到搁心置腹，如，初见。再，后来。 每次想和你聊聊天，都得等个什么日子做借口。想起你，就是我心里最柔软的地方。 我们都太要强 没有女孩子天生想做女汉子，只是我不是你想找的那个依靠 用了七年的时间念念不忘，回忆比经历还要长，该说自己太痴情还是太想不开呢？ 其实有时候我们的内心远远没有表面那么潇洒，背影一转身就可以，而心里的空缺要怎样去填平？离开后的日子我瞒着所有人爱了你好久好久。 这次再做一次傻逼也好，什么也好，终于我们都把话说开了，放过你，放过我。那些无处安放的情感就让它各自归位。这是对我们最好的结局。 我放手了，你也要早日找到你的依靠。堕落了这几年，我也要奋力去追回我丢失的时光，寻找我自己的幸福了。 重新认识你 L： “你好，我是9 號，很高兴认识你” 公众号原文","link":"/2017/10/27/如果你想起我，你会想到什么/"}],"tags":[{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"编程开发","slug":"编程开发","link":"/tags/编程开发/"},{"name":"代码块","slug":"代码块","link":"/tags/代码块/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"实用教程","slug":"实用教程","link":"/tags/实用教程/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"NodeJs","slug":"NodeJs","link":"/tags/NodeJs/"},{"name":"实用工具","slug":"实用工具","link":"/tags/实用工具/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"SpringMVC","slug":"SpringMVC","link":"/tags/SpringMVC/"},{"name":"MyBatis","slug":"MyBatis","link":"/tags/MyBatis/"},{"name":"Maven","slug":"Maven","link":"/tags/Maven/"},{"name":"SSM","slug":"SSM","link":"/tags/SSM/"},{"name":"SVN","slug":"SVN","link":"/tags/SVN/"},{"name":"Visualsvn Server","slug":"Visualsvn-Server","link":"/tags/Visualsvn-Server/"},{"name":"DEMO","slug":"DEMO","link":"/tags/DEMO/"},{"name":"WPF","slug":"WPF","link":"/tags/WPF/"},{"name":"MVVM","slug":"MVVM","link":"/tags/MVVM/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"系统配置","slug":"系统配置","link":"/tags/系统配置/"},{"name":"Oracle","slug":"Oracle","link":"/tags/Oracle/"},{"name":"Http","slug":"Http","link":"/tags/Http/"},{"name":"Proxy","slug":"Proxy","link":"/tags/Proxy/"},{"name":"Service","slug":"Service","link":"/tags/Service/"},{"name":"情感","slug":"情感","link":"/tags/情感/"},{"name":"随笔","slug":"随笔","link":"/tags/随笔/"},{"name":"日记","slug":"日记","link":"/tags/日记/"},{"name":"激活","slug":"激活","link":"/tags/激活/"},{"name":"系统优化","slug":"系统优化","link":"/tags/系统优化/"},{"name":"部署实施","slug":"部署实施","link":"/tags/部署实施/"},{"name":"Redis","slug":"Redis","link":"/tags/Redis/"},{"name":"软件安装","slug":"软件安装","link":"/tags/软件安装/"}],"categories":[{"name":"Codeing","slug":"Codeing","link":"/categories/Codeing/"},{"name":"实用教程","slug":"实用教程","link":"/categories/实用教程/"},{"name":"个人","slug":"个人","link":"/categories/个人/"}]}